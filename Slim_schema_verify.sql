----------------------------------------------------------------------------------------------------------------------------------------
--                      		Waters Corporation
--                    		   nugenesis9_Slim_schema_verify_r9.sql
-- This script is to be used for verification of SLIM database schema.
----------------------------------------------------------------------------------------------------------------------------------------
-- PERSON 		REVISION		DATE			REASON
-- DBREIDING		1			08-08-18		CREATION
-- DBREIDING		2			02-18-19		Mod query for slim version to ensure a single row is returned
-- MMORRISON		3			2020-01-27		Remove queries on Oracle datafiles, tablespaces, RAC, RMAN, etc.; they're more suited to the db_monitor script
-- MMORRISON		4			2020-06-03		Use the correct name of the SLIMAUTOREQUESTLWR job in the verification checks.
-- MMorrison		5			2021-04-13		Check for the 4 default SLIM application accounts in the slim.users table.
-- KAdamczyk		6 			2022-02-17		List studies with highest event entries, show deep dive analysis for studies with >10k event records
-- MMorrison		7			2022-03-10		Check for NULL and duplicate interval object IDs in the study protocols.
-- MMorrison		8			2022-09-26		Check for SLIM schema updates in NuGenesis 9.2.
-- MMorrison            9                       2022-10-17              Add several functions to the expected privileges for SLIMUSER.
----------------------------------------------------------------------------------------------------------------------------------------

SET FEEDBACK OFF LINESIZE 500 PAGESIZE 100 TRIMSPOOL ON TIMING OFF ECHO OFF DOC OFF TRIM ON verify off SERVEROUTPUT ON SIZE 1000000 heading ON
TTITLE OFF

COLUMN file NEW_VALUE file NOPRINT 
COLUMN BYTES 			FORMAT 999,999,999,999 heading 'Size'
COLUMN TODAY 			FORMAT a30 heading "Todays Date"
COLUMN CREATED 			FORMAT A20
COLUMN FILE_NAME 		FORMAT A70
COLUMN TABLESPACE_NAME 		FORMAT A35
COLUMN TEMPORARY_TABLESPACE 	FORMAT A15 HEADING 'TEMPORARY'
COLUMN USERNAME			FORMAT A20
COLUMN NAME 			FORMAT A30
COLUMN OWNER 			FORMAT A15
COLUMN OBJECT_TYPE 		FORMAT A15
COLUMN OBJECT_NAME 		FORMAT A30
COLUMN CREATED 			FORMAT A15
COLUMN VERSION_NUMBER 		FORMAT A12
COLUMN TIMEDIFF 		FORMAT A15
COLUMN TRIGGERING_EVENT		FORMAT A10
COLUMN TABLE_NAME 		FORMAT A25
COLUMN SCHEMA_USER		FORMAT A15
COLUMN INTERVAL			FORMAT A20
COLUMN WHAT			FORMAT A25
COLUMN SEGMENT_NAME 		FORMAT A40
COLUMN CLUSTER_NAME		FORMAT A40
col parameter format a30

ALTER SESSION SET NLS_DATE_FORMAT = "MM/DD/YYYY";
COLUMN file NEW_VALUE file NOPRINT 
SELECT 'NuGenesis9_SLIM_schema_VERIFY_r9_'||to_char(sysdate,'yyyy-mm-dd_hh24-mi')||'.log' "file" FROM DUAL;

SPOOL &file 

prompt           ***********************************************************
prompt           * NuGenesis 9 Stability Module SCHEMA VERIFICATION REPORT *
prompt           ***********************************************************
prompt
prompt		  THIS SCRIPT MUST BE EXECUTED WITH DBA PRIVILEGES!

PROMPT
PROMPT ___________________________________________________________________________________________________________
PROMPT Oracle database and instance version info
PROMPT

COLUMN BANNER FORMAT A85 HEADING "VERSION"
SELECT BANNER FROM V$VERSION;

COLUMN HOST_NAME FORMAT A35
SELECT INSTANCE_NAME, HOST_NAME, STATUS, ARCHIVER, DATABASE_STATUS FROM V$INSTANCE;

COLUMN DBID HEADING "DATABASE ID"
COLUMN PLATFORM_NAME FORMAT A35 HEADING "OS"
COLUMN PLATFORM_ID HEADING "OS ID"
COLUMN CDB FORMAT A35 HEADING "CONTAINER DB"
SELECT CDB, CON_ID, OPEN_MODE, CON_DBID, DBID, PLATFORM_NAME, PLATFORM_ID, log_mode FROM V$DATABASE;

COLUMN COMP_NAME FORMAT	A40 HEADING "COMPONENT NAME"
COLUMN VERSION FORMAT A12
PROMPT ORACLE COMPONENT INFORMATION FOR THIS DATABASE INSTANCE:
SELECT COMP_NAME, VERSION, STATUS, MODIFIED FROM DBA_REGISTRY;

PROMPT DATABASE CONFIGURATION PARAMETERS:
SELECT substr(name,1,30) Name, substr(value,1,25) Value FROM v$parameter WHERE name IN ('cpu_count','shared_pool_size','db_cache_size','db_block_size','db_file_multiblock_read_count','parallel_automatic_tuning','text_enable','optimizer_percent_parallel','sql_version','optimizer_mode','open_cursors','db_name','sort_area_size','sort_area_retained_size','instance_name','db_files');

PROMPT DATABASE LANGUAGE SETTINGS:
COLUMN VALUE	FORMAT A40
SELECT * FROM NLS_DATABASE_PARAMETERS;

PROMPT
PROMPT ___________________________________________________________________________________________________________
PROMPT NuGenesis Stability schema version info
PROMPT

DECLARE
v_val		SLIM.OPTION_VALUES.VALUE%TYPE;
v_cnt		NUMBER;

BEGIN
	DBMS_OUTPUT.PUT_LINE('.');
	SELECT COUNT(USERNAME) INTO v_cnt FROM DBA_USERS WHERE USERNAME = 'SLIM';
	IF v_cnt  > 0 THEN
		SELECT VALUE INTO v_val FROM SLIM.OPTION_VALUES WHERE USER_ID = 0 AND OPTION_ID = 1;
		DBMS_OUTPUT.PUT_LINE('Stability Module schema version: '||v_val);
	ELSIF v_cnt = 0 THEN
		DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: The SLIM schema has not been created in this database instance!');
	END IF; 
	DBMS_OUTPUT.PUT_LINE('.');
END;
/

PROMPT
PROMPT ___________________________________________________________________________________________________________
PROMPT Checking the database character set ...
PROMPT
DECLARE
v_value		VARCHAR2(120);

BEGIN
	SELECT VALUE INTO v_value FROM NLS_DATABASE_PARAMETERS WHERE PARAMETER = 'NLS_CHARACTERSET';
	IF v_value = 'AL32UTF8'		THEN	DBMS_OUTPUT.PUT_LINE ('This database has the correct nls_characterset for NuGenesis 9: '||v_value);
	ELSIF v_value != 'AL32UTF8'	THEN	DBMS_OUTPUT.PUT_LINE ('!!!!! ERROR: INCOMPATIBLE NLS_CHARACTERSET! THe NLS_CHARACTERSET FOR THIS DATABASE IS: '||v_value||'! NuGenesis 9 REQUIRES THE AL32UTF8 CHARACTERSET');
	END IF;
END;
/

PROMPT
PROMPT ___________________________________________________________________________________________________________
PROMPT Determining whether the NuGenesis Stability schema accounts are present...
PROMPT
DECLARE
v_Count			PLS_INTEGER := 0;
v_ExpectedNo		PLS_INTEGER;
v_AcctProfile		dba_users.profile%TYPE;
v_AcctStatus		dba_users.account_status%TYPE;
v_AcctName		dba_users.username%TYPE;
v_AcctPwdTime		dba_profiles.limit%TYPE;

TYPE ObjList		IS TABLE OF VARCHAR2(500);
t_SchemaAccounts	ObjList;

BEGIN
	t_SchemaAccounts := ObjList('SLIM','SLIM_ADMIN');
	v_ExpectedNo     := t_SchemaAccounts.COUNT;

	SELECT COUNT(*) INTO v_Count FROM dba_users WHERE username IN ('SLIM','SLIM_ADMIN');
	IF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: fewer than the expected number of NuGenesis Stability accounts are present in this DB instance ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
	ELSIF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The expected number of NuGenesis Stability accounts are present in this DB instance ('||v_ExpectedNo||' expected, '||v_Count||' found).');
	ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!! WARNING: more than expected number of NuGenesis Stability accounts are present in this DB instance ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
	END IF;

	FOR indx IN 1 .. t_SchemaAccounts.COUNT
	LOOP
		v_AcctName := t_SchemaAccounts(indx);
		SELECT COUNT(*) INTO v_Count FROM dba_users WHERE username = v_AcctName;
		IF (v_Count = 1) 	THEN	DBMS_OUTPUT.PUT_LINE('The '||v_AcctName||' account has been created.');
		ELSIF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: the '||v_AcctName||' account has not been created!');
		END IF;

		DBMS_OUTPUT.PUT_LINE ('.');
	END LOOP;
END;
/

PROMPT
PROMPT ______________________________________________________________________________________
PROMPT Determining whether the SLIMUSER role is present...
PROMPT
DECLARE
v_Count			PLS_INTEGER := 0;
v_ExpectedNo		PLS_INTEGER;

BEGIN
	v_ExpectedNo  := 1;

	SELECT COUNT(*) INTO v_Count FROM dba_roles WHERE role IN ('SLIMUSER');
	IF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: the SLIMUSER Role is not present in this DB instance ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
	ELSIF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The SLIMUSER role is present in this DB instance ('||v_ExpectedNo||' expected, '||v_Count||' found).');
	END IF;
END;
/

PROMPT
PROMPT _________________________________________________________________________________________________
PROMPT Determining whether the expected roles have been granted to the NuGenesis Stability schema accounts
PROMPT
DECLARE
v_Count			PLS_INTEGER := 0;
v_ExpectedNo		PLS_INTEGER;
v_AcctName		dba_users.username%TYPE;

TYPE ObjList		IS TABLE OF VARCHAR2(500);
t_GranteeList		ObjList;
t_GrantedRoleList	ObjList;

BEGIN
	t_GranteeList := ObjList('SLIM','SLIM_ADMIN','SLIMUSER');
	v_ExpectedNo  := t_GranteeList.COUNT;

	FOR indx IN 1 .. t_GranteeList.COUNT
	LOOP
		v_AcctName := t_GranteeList(indx);
		IF(v_AcctName = 'SLIM')			THEN	t_GrantedRoleList := ObjList('SLIMUSER','SELECT_CATALOG_ROLE');
		ELSIF(v_AcctName = 'SLIMUSER')		THEN	t_GrantedRoleList := ObjList('CONNECT');
		ELSIF(v_AcctName = 'SLIM_ADMIN')	THEN	t_GrantedRoleList := ObjList('CONNECT','SLIMUSER');
		END IF;

		v_ExpectedNo := t_GrantedRoleList.COUNT;

		SELECT COUNT(*) INTO v_Count FROM dba_role_privs WHERE grantee = v_AcctName;
		IF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: fewer than the expected number of roles have been granted to '||v_AcctName||' ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
		ELSIF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The expected number of roles have been granted to '||v_AcctName||' ('||v_ExpectedNo||' expected, '||v_Count||' found).');
		ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('More than expected number of roles have been granted to '||v_AcctName||' ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
		END IF;

		FOR indx2 IN 1 .. t_GrantedRoleList.COUNT
		LOOP
			SELECT COUNT(*) INTO v_Count FROM dba_role_privs WHERE grantee = v_AcctName AND granted_role = t_GrantedRoleList(indx2);
			IF(v_Count = 1)		THEN	DBMS_OUTPUT.PUT_LINE('-- granted the role '||t_GrantedRoleList(indx2));
			ELSE				DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: was NOT granted the role '||t_GrantedRoleList(indx2)||'!');
			END IF;
		END LOOP;

		DBMS_OUTPUT.PUT_LINE ('.');
	END LOOP;
END;
/

PROMPT
PROMPT _________________________________________________________________________________________________
PROMPT Determining whether the expected tablespaces and quotas are present for the NuGenesis schemas
PROMPT
DECLARE
v_Count		NUMBER;
v_SchemaName	VARCHAR2(100);
v_ExpectedNo	PLS_INTEGER;
v_TblspcName	VARCHAR2(500);
v_TblspcQuota	NUMBER;
TYPE ObjList	IS TABLE OF VARCHAR2(500);
TYPE NumList	IS TABLE OF NUMBER;
t_SchemaList	ObjList;
t_TblspcList	ObjList;
t_QuotaList	NumList;

BEGIN
	t_TblspcList := ObjList('SLIM_DATA','SLIM_INDEX');

	DBMS_OUTPUT.PUT_LINE ('.');
	DBMS_OUTPUT.PUT_LINE ('Checking the other NuGenesis tablespaces by name:');
	FOR indx IN 1 .. t_TblspcList.COUNT
	LOOP
		v_TblspcName := t_TblspcList(indx);
		IF (v_TblspcName = 'SLIM_DATA')	THEN
			t_SchemaList := ObjList('SLIM');
			t_QuotaList  := NumList(-1);
		ELSIF (v_TblspcName = 'SLIM_INDEX')	THEN
			t_SchemaList := ObjList('SLIM');
			t_QuotaList  := NumList(-1);
		END IF;

		SELECT COUNT(*) INTO v_Count FROM dba_tablespaces WHERE tablespace_name = v_TblspcName;
		IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE ('!!!!! ERROR: the tablespace '||v_TblspcName||' does not exist!');
		ELSIF (v_Count = 1)	THEN
			DBMS_OUTPUT.PUT_LINE ('The tablespace '||v_TblspcName||' exists.');
		END IF;

		FOR indx2 IN 1 .. t_SchemaList.COUNT
		LOOP
			v_SchemaName  := t_SchemaList(indx2);
			v_TblspcQuota := t_QuotaList(indx2);
			SELECT COUNT(*) INTO v_Count FROM dba_ts_quotas WHERE username = v_SchemaName AND tablespace_name = v_TblspcName AND max_bytes = v_TblspcQuota;
			IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE ('-- !!!!! ERROR: '||v_SchemaName||' does not have an unlimited quota on '||v_TblspcName||'!');
			ELSIF (v_Count = 1)	THEN	DBMS_OUTPUT.PUT_LINE ('-- '||v_SchemaName||' has an unlimited quota on '||v_TblspcName);
			END IF;
		END LOOP;
		DBMS_OUTPUT.PUT_LINE ('.');		
	END LOOP;
END;
/

COLUMN USERNAME FORMAT A17
COLUMN QUOTA FORMAT A16
PROMPT
PROMPT
SELECT REPLACE(max_bytes, '-1', 'UNLIMITED') "QUOTA", USERNAME, TABLESPACE_NAME FROM dba_ts_quotas where username IN ('SLIM', 'SLIM_ADMIN') order by username;


PROMPT
PROMPT ______________________________________________________________________________________
PROMPT Determining whether the Stability schemas have the expected system privileges...
PROMPT
DECLARE
v_Count			PLS_INTEGER := 0;
v_ExpectedNo		PLS_INTEGER;
v_PrivName		dba_sys_privs.privilege%TYPE;
v_SchemaName		VARCHAR2(100);

TYPE ObjList		IS TABLE OF VARCHAR2(500);
t_SchemaList		ObjList;
t_SystemPrivs		ObjList;

BEGIN
	t_SchemaList  := ObjList('SLIM','SLIM_ADMIN');

	FOR indx2 IN 1 .. t_SchemaList.COUNT
	LOOP
		v_SchemaName  := t_SchemaList(indx2);
		IF(v_SchemaName = 'SLIM')		THEN	t_SystemPrivs := ObjList('ALTER USER','CREATE JOB','CREATE PROCEDURE','CREATE PUBLIC SYNONYM','CREATE SEQUENCE','CREATE TABLE','CREATE TRIGGER','CREATE VIEW','MANAGE SCHEDULER');
		ELSIF(v_SchemaName = 'SLIM_ADMIN')	THEN	t_SystemPrivs := ObjList('ALTER USER','CREATE USER','DROP USER');
		END IF;
		v_ExpectedNo := t_SystemPrivs.COUNT;

		SELECT COUNT(*) INTO v_Count FROM dba_sys_privs WHERE grantee = v_SchemaName;
		IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The '||v_SchemaName||' schema has the correct number of system privileges ('||v_ExpectedNo||' expected, '||v_Count||' found).');
		ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: the '||v_SchemaName||' schema has fewer than the expected number of system privileges ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
		ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The '||v_SchemaName||' schema has more than the expected number of system privileges ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
		END IF;

		FOR indx IN 1 .. t_SystemPrivs.COUNT
		LOOP
			v_PrivName := t_SystemPrivs(indx);
			SELECT COUNT(*) INTO v_Count FROM dba_sys_privs WHERE grantee = v_SchemaName AND privilege = v_PrivName;
			IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: '||v_SchemaName||' was not granted the sys privilege: '||v_PrivName);
			ELSE				DBMS_OUTPUT.PUT_LINE('-- '||v_SchemaName||' was granted the sys privilege: '||v_PrivName);
			END IF;
		END LOOP;
		DBMS_OUTPUT.PUT_LINE('.');
	END LOOP;
END;
/

COLUMN GRANTEE 		FORMAT	A18
COLUMN PRIVILEGE 	FORMAT	A30
COLUMN ADMIN_OPTION	FORMAT	A12
BREAK ON GRANTEE SKIP 1
PROMPT
SELECT GRANTEE, PRIVILEGE, ADMIN_OPTION FROM DBA_SYS_PRIVS WHERE GRANTEE IN ('SLIM', 'SLIM_ADMIN','SLIMUSER') ORDER BY GRANTEE;


PROMPT
PROMPT _________________________________________________________________________________________________
PROMPT Determining if the expected object privileges have been granted to NuGenesis Stability schemas...
PROMPT
DECLARE
v_Count		PLS_INTEGER := 0;
v_ExpectedNo	PLS_INTEGER;
v_SchemaName	VARCHAR2(100);
v_PrivName	VARCHAR2(100);
v_ObjOwner	VARCHAR2(100);
v_ObjName	VARCHAR2(100);

TYPE ObjList		IS TABLE OF VARCHAR2(500);
t_SchemaList		ObjList;
t_PrivNameList		ObjList;
t_PrivObjOwnerList	ObjList;
t_PrivObjNameList	ObjList;

BEGIN
	t_SchemaList  := ObjList('SLIM','SLIM_ADMIN','SLIMUSER');

	FOR indx IN 1 .. t_SchemaList.COUNT
	LOOP
		v_SchemaName := t_SchemaList(indx);
		IF (v_SchemaName = 'SLIM')			THEN
			t_PrivNameList     := ObjList('SELECT','SELECT','SELECT','SELECT','SELECT');
			t_PrivObjOwnerList := ObjList('SYS','SYS','SYS','SYS','SYS');
			t_PrivObjNameList  := ObjList('V_$SESSION','V_$PARAMETER','V_$DATABASE','DBA_USERS','DBA_TRIGGERS');
		ELSIF (v_SchemaName = 'SLIM_ADMIN')		THEN
			t_PrivNameList     := ObjList
'SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','SELECT','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE','UPDATE',

			t_PrivObjOwnerList := ObjList

'SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM','SLIM');
			t_PrivObjNameList  := ObjList('DBA_ROLE_PRIVS','DBA_USERS','OBJ_PROCESS_LOCKS','OBJ_PROPS','OBJ_PROP_DEFS','OBJ_REPORT_TEMPLATES','OBJ_ROOT_OBJECTS','OBJ_SEARCH_ACCESS','OBJ_SEARCH_COLUMNS','OBJ_SEARCH_STATUSES','OBJ_SESSION_TRACES','OBJ_SPECIAL_OBJECTS','OBJ_STATE_AUTO_TRANSITIONS','OBJ_STATE_DEFS','OBJ_STATE_TRANSITIONS','OBJ_TRASH_ITEMS','OBJ_TYPES','OBJ_TYPE_PROPS','OBJ_TYPE_VIEWS','OBJ_USER_PROFILE_MESSAGES','OBJ_USER_PROFILE_OBJECTS','OBJ_USER_PROFILE_SEARCHES','OBJ_VIEWS','TEMP_SUBINT_PROC_CREPORT','TEMP_FN_PULL_CHAMBERS','TEMP_TEMPBROWSE_BATCH_LOTS','TEMP_TESTCATS_PROC_CREPORT','TEMP_HTMLIP_REPORT_ANNOTATIONS','TEMP_TESTSIP_REPORT_PROTOCOL','TEMP_HTMLIP_REPORT_BATCH','TEMP_TESTSIP_REPORT_PSR','TEMP_HTMLIP_REPORT_OBJECT','TEMP_TESTSIP_REPORT_SPEC_ALERT','TEMP_HTMLIP_REPORT_PRODUCT_HTM','TEMP_TESTSIP_REPORT_STUDY_RESU','TEMP_HTMLIP_REPORT_RESOURCE_NE','TEMP_TESTSPROC_RESULTS','TEMP_HTMLIP_REPORT_SAMPLE_INFO','TEMP_TESTS_PROC_CREPORT','TEMP_HTMLIP_REPORT_STUDY_HTML','TEMP_TEST_COUNTSIP_REPORT_SAMP','TEMP_HTMLIP_REPORT_STUDY_RESUL','TEMP_TEST_TYPESPROC_RESULTS_QU','TEMP_HTMLIP_REPORT_TABLE_COLUM','TEMP_TFIP_REPORT_STUDY_HTML','TEMP_INDEX_NAME','TEMP_VALSIP_REPORT_PROTOCOL','TEMP_INGRED2_IP_REPORT_SAS_JMP','TEMP_VALSPROC_RESOURCE_SCHEDUL','TEMP_INGRED3_IP_REPORT_SAS_JMP','TEMP_VALSPROC_RESULTS','ALTERNATE_RESULT_FAILURES','OBJ_VIEW_COLUMNS','OBJ_VIRTUAL_OBJECTS','ALTERNATE_TEST_SPECS','OPTION_DEFS','OPTION_VALUES','BATCH_RECORDS','PROTOCOL_INFO','PROTOCOL_PULL_CHAMBERS','PROTOCOL_STORAGES','CHAMBER_CONDITIONS','PROTOCOL_TEST_GROUPS','CUSTOM_LIST','RESULTS','RESULTS_TEST_FIELDS','FORMULATION_COMPONENTS','SLIM_TIME_ZONES','FORM_UPDATE_INFO','SPEC_ALERTS','TEMP_ALTSPECS_IP_COPY_OBJ_TF','GW_PKG_CODES','TEMP_ALTSPECS_IP_PP_OBJ_TF','TEMP_CURRENT_USES','INVENTORY_RECORDS','TEMP_DRUG_SUBSTIP_REPORT_STUDY','INVENTORY_XACT_TYPES','TEMP_SCIP_REPORT_STUDY_HTML','LABEL_LAYOUTS','TEMP_VALUE','LWRS','TESTS','TEST_FIELDS','TEST_FIELD_FORMATS','MESSAGES','TEST_FIELD_TERMS','TEST_OBS_TERMS','NONPULLS','TEST_OBS_TERMS2','NON_PULL_INVENTORY','TEST_REMARKS','OBJECTS',
'TEST_RESOURCES','OBJ_ACCESS_TYPES','TEST_TYPES','OBJ_ACES','TEST_TYPE_GROUPS','OBJ_ALIASES','TIME_INTERVALS','OBJ_CLSID_NAMES','TMPIP_RPR_LWR_FORM_OBJS','OBJ_DTAS','TMPIP_RPT_LWR_FORM_INITRES','OBJ_DTA_VALUES','TT_FORMULATIONS','OBJ_DTA_VALUES2','TT_FORM_COMP','OBJ_EVENTS','USERS','OBJ_EVENT_CODES','USER_PASSWORDS','OBJ_EVENT_TYPES','OBJ_FORMS','OBJ_LIST_DEFS','OBJ_LOGICAL_CHECKS','OBJ_LOGINS','OBJ_PROCESSES','OBJ_PROCESS_ENVIRONMENT','TEMP_STUDIESPROC_RESULTS','TMPPROCSEARCHROW','EXTENDED_PROPERTIES','IPRPTLWRFRMOBSRSLTS','IPRPTLWRFRMOBSTRM','REPORT_TEMPLATE','TEMP_ACESIP_PP_USER_COMMON','TEMP_BATCHES_PROC_CREPORT','TEMP_COLSIP_REPORT_PROTOCOL','TEMP_COLSPROC_RESOURCE_SCHEDUL','TEMP_COLSPROC_RESULTS','TEMP_COLS_IP_REPORT_SAS_JMP','TEMP_COLS_PROC_CREPORT','TEMP_COLS_PROC_CREPORT_2','TEMP_COMPONENTS','TEMP_CONDITIONSPROC_RESULTS','TEMP_STUDIESPROC_RESULTS_QUERY','TEMP_STUDIES_PROC_CREPORT','TEMP_SUBCOND_PROC_CREPORT','TEMP_CONDITIONS_PROC_CREPORT','TMPPROCSEARCHSTATES','TMPPROCSEARCHVALUE','TMPSTATUSPROC_OBJECT_SEARCH','TMPSTAT_RESULTRETSET','TMP_PROC_GET_TESTS_RESULTS','TEMP_CREATED_BY','TEMP_EVENTSIP_REPORT_EVENT_LOG','TEMP_FIELDSBROWSE_STUDY_FIELDS','TEMP_OBJ_ID_TABLE2','TMPOBJSCOPE_PROC_SEARCH','TEMP_PROC_SRG_REPORT_SPECEV','TEMP_INGRED4_IP_REPORT_SAS_JMP','TEMP_VALS_IP_REPORT_SAS_JMP','TEMP_INGRED_IP_REPORT_SAS_JMP','TEMP_VALS_PROC_CREPORT','TEMP_INGRED_PROC_CREPORT','TMPBROWSESEARCHCOLS','TEMP_INTERVALS_PROC_CREPORT','TMPBROWSESTUDIES','TEMP_IP_PP_SEARCH_VALUES','TMPBROWSESTUDIESRETSET','TEMP_IP_REPORT_DISCARD_WIN','TMPBROWSEUSRPROFILELABS','TEMP_LABSIP_PP_USER_COMMON','TMPBRSUSRPRFLEFAVS','TEMP_LABSPROC_SHOW_DEFAULT_SCH','TMPBRSWUSERSUSERINFO','TEMP_LINKSIP_REPORT_OBJECT','TMPBRWSEBATCHES','TEMP_LISTPROC_RESOURCE_SCHEDUL','TMPBRWSECCCODES','TEMP_LWR_NONPULL','TMPBRWSELAB','TEMP_NUMSIP_PARSE_NUMBER_ARRAY','TMPBRWSEPROTEMPCON','TEMP_NUMSIP_PARSE_NUMBER_LIST','TMPBRWSESPECALERTALERTS','TEMP_OBJS','TMPBRWSESPECALERTS','TEMP_OBJSIP_LIST_BATCH','TMPBRWSETAG','TEMP_OBJSIP_LIST_FORMULATION','TMPFOOTNOTES','TEMP_OBJ_ID_TABLE','TMPHTML','TMPHTMLREPORTFOOTER','TEMP_PROC_CANONICAL_PATH_ENT','TMPHTMLREPORTHEADER',
'TEMP_RESIP_REPORT_RESOURCE_NEE','TEMP_RESPONSE_DTA_EXECUTE','TMPIPCOPYOBJECT','TEMP_RESULTSPROC_RESULTS','TMPIPPGOBJECTPROPS','TEMP_RESULTS_PROC_CREPORT','TMPIPPGSEARCHPROPS','TEMP_ROWSIP_REPORT_PROTOCOL','TMPIP_REPORT_PROP2','TMPLABS','TEMP_ROWSPROC_RESOURCE_SCHEDUL','TMPLWRS','TEMP_ROWSPROC_RESULTS','TMPLWRSPRCSHWDFLTSCHED','TEMP_ROWS_IP_REPORT_SAS_JMP','TEMP_ROWS_PROC_CREPORT','TMPOBJSPROC_OBJECT_SEARCH_02','TEMP_ROWS_PROC_CREPORT_2','TMPPROCGETLISTENTRIES','TEMP_ROWS_TEMPPROC_RESULTS','TMPPROCGETPROP','TEMP_ROW_HEADERSIP_REPORT_PROT','TMPPROCSEARCHCOL','TEMP_SLIMSTAS_STUDIES','TMPPROCSEARCHCOLUMNS','TEMP_SLIMSTAT_CONDS','TMPPROCSEARCHOBJECTS','TEMP_SLIMSTAT_VALS','TMPPROCSEARCHPROPS','TEMP_STATUS','OBJ_PROCESS_LOCKS','OBJ_PROPS','OBJ_PROP_DEFS','OBJ_REPORT_TEMPLATES','OBJ_ROOT_OBJECTS','OBJ_SEARCH_ACCESS','OBJ_SEARCH_COLUMNS','OBJ_SEARCH_STATUSES','OBJ_SESSION_TRACES','OBJ_SPECIAL_OBJECTS','OBJ_STATE_AUTO_TRANSITIONS','OBJ_STATE_DEFS','OBJ_STATE_TRANSITIONS','OBJ_TRASH_ITEMS','OBJ_TYPES','OBJ_TYPE_PROPS','OBJ_TYPE_VIEWS','OBJ_USER_PROFILE_MESSAGES','OBJ_USER_PROFILE_OBJECTS','OBJ_USER_PROFILE_SEARCHES','OBJ_VIEWS','TEMP_SUBINT_PROC_CREPORT','TEMP_FN_PULL_CHAMBERS','TEMP_TEMPBROWSE_BATCH_LOTS','TEMP_TESTCATS_PROC_CREPORT','TEMP_HTMLIP_REPORT_ANNOTATIONS','TEMP_TESTSIP_REPORT_PROTOCOL','TEMP_HTMLIP_REPORT_BATCH','TEMP_TESTSIP_REPORT_PSR','TEMP_HTMLIP_REPORT_OBJECT','TEMP_TESTSIP_REPORT_SPEC_ALERT','TEMP_HTMLIP_REPORT_PRODUCT_HTM','TEMP_TESTSIP_REPORT_STUDY_RESU','TEMP_HTMLIP_REPORT_RESOURCE_NE','TEMP_TESTSPROC_RESULTS','TEMP_HTMLIP_REPORT_SAMPLE_INFO','TEMP_TESTS_PROC_CREPORT','TEMP_HTMLIP_REPORT_STUDY_HTML','TEMP_TEST_COUNTSIP_REPORT_SAMP','TEMP_HTMLIP_REPORT_STUDY_RESUL','TEMP_TEST_TYPESPROC_RESULTS_QU','TEMP_HTMLIP_REPORT_TABLE_COLUM','TEMP_TFIP_REPORT_STUDY_HTML','TEMP_INDEX_NAME','TEMP_VALSIP_REPORT_PROTOCOL','TEMP_INGRED2_IP_REPORT_SAS_JMP','TEMP_VALSPROC_RESOURCE_SCHEDUL','TEMP_INGRED3_IP_REPORT_SAS_JMP','TEMP_VALSPROC_RESULTS','ALTERNATE_RESULT_FAILURES','OBJ_VIEW_COLUMNS','OBJ_VIRTUAL_OBJECTS','ALTERNATE_TEST_SPECS','OPTION_DEFS','OPTION_VALUES','BATCH_RECORDS','PROTOCOL_INFO','PROTOCOL_PULL_CHAMBERS',
'PROTOCOL_STORAGES','CHAMBER_CONDITIONS','PROTOCOL_TEST_GROUPS','CUSTOM_LIST','RESULTS','RESULTS_TEST_FIELDS','FORMULATION_COMPONENTS','SLIM_TIME_ZONES','FORM_UPDATE_INFO','SPEC_ALERTS','TEMP_ALTSPECS_IP_COPY_OBJ_TF','GW_PKG_CODES','TEMP_ALTSPECS_IP_PP_OBJ_TF','TEMP_CURRENT_USES','INVENTORY_RECORDS','TEMP_DRUG_SUBSTIP_REPORT_STUDY','INVENTORY_XACT_TYPES','TEMP_SCIP_REPORT_STUDY_HTML','LABEL_LAYOUTS','TEMP_VALUE','LWRS','TESTS','TEST_FIELDS','TEST_FIELD_FORMATS','MESSAGES','TEST_FIELD_TERMS','TEST_OBS_TERMS','NONPULLS','TEST_OBS_TERMS2','NON_PULL_INVENTORY','TEST_REMARKS','OBJECTS','TEST_RESOURCES','OBJ_ACCESS_TYPES','TEST_TYPES','OBJ_ACES','TEST_TYPE_GROUPS','OBJ_ALIASES','TIME_INTERVALS','OBJ_CLSID_NAMES','TMPIP_RPR_LWR_FORM_OBJS','OBJ_DTAS','TMPIP_RPT_LWR_FORM_INITRES','OBJ_DTA_VALUES','TT_FORMULATIONS','OBJ_DTA_VALUES2','TT_FORM_COMP','OBJ_EVENTS','USERS','OBJ_EVENT_CODES','USER_PASSWORDS','OBJ_EVENT_TYPES','OBJ_FORMS','OBJ_LIST_DEFS','OBJ_LOGICAL_CHECKS','OBJ_LOGINS','OBJ_PROCESSES','OBJ_PROCESS_ENVIRONMENT','TEMP_STUDIESPROC_RESULTS','TMPPROCSEARCHROW','EXTENDED_PROPERTIES','IPRPTLWRFRMOBSRSLTS','IPRPTLWRFRMOBSTRM','REPORT_TEMPLATE','TEMP_ACESIP_PP_USER_COMMON','TEMP_BATCHES_PROC_CREPORT','TEMP_COLSIP_REPORT_PROTOCOL','TEMP_COLSPROC_RESOURCE_SCHEDUL','TEMP_COLSPROC_RESULTS','TEMP_COLS_IP_REPORT_SAS_JMP','TEMP_COLS_PROC_CREPORT','TEMP_COLS_PROC_CREPORT_2','TEMP_COMPONENTS','TEMP_CONDITIONSPROC_RESULTS','TEMP_STUDIESPROC_RESULTS_QUERY','TEMP_STUDIES_PROC_CREPORT','TEMP_SUBCOND_PROC_CREPORT','TEMP_CONDITIONS_PROC_CREPORT','TMPPROCSEARCHSTATES','TMPPROCSEARCHVALUE','TMPSTATUSPROC_OBJECT_SEARCH','TMPSTAT_RESULTRETSET','TMP_PROC_GET_TESTS_RESULTS','TEMP_CREATED_BY','TEMP_EVENTSIP_REPORT_EVENT_LOG','TEMP_FIELDSBROWSE_STUDY_FIELDS','TEMP_OBJ_ID_TABLE2','TMPOBJSCOPE_PROC_SEARCH','TEMP_PROC_SRG_REPORT_SPECEV','TEMP_INGRED4_IP_REPORT_SAS_JMP','TEMP_VALS_IP_REPORT_SAS_JMP','TEMP_INGRED_IP_REPORT_SAS_JMP','TEMP_VALS_PROC_CREPORT','TEMP_INGRED_PROC_CREPORT','TMPBROWSESEARCHCOLS','TEMP_INTERVALS_PROC_CREPORT','TMPBROWSESTUDIES','TEMP_IP_PP_SEARCH_VALUES','TMPBROWSESTUDIESRETSET','TEMP_IP_REPORT_DISCARD_WIN',
'TMPBROWSEUSRPROFILELABS','TEMP_LABSIP_PP_USER_COMMON','TMPBRSUSRPRFLEFAVS','TEMP_LABSPROC_SHOW_DEFAULT_SCH','TMPBRSWUSERSUSERINFO','TEMP_LINKSIP_REPORT_OBJECT','TMPBRWSEBATCHES','TEMP_LISTPROC_RESOURCE_SCHEDUL','TMPBRWSECCCODES','TEMP_LWR_NONPULL','TMPBRWSELAB','TEMP_NUMSIP_PARSE_NUMBER_ARRAY','TMPBRWSEPROTEMPCON','TEMP_NUMSIP_PARSE_NUMBER_LIST','TMPBRWSESPECALERTALERTS','TEMP_OBJS','TMPBRWSESPECALERTS','TEMP_OBJSIP_LIST_BATCH','TMPBRWSETAG','TEMP_OBJSIP_LIST_FORMULATION','TMPFOOTNOTES','TEMP_OBJ_ID_TABLE','TMPHTML','TMPHTMLREPORTFOOTER','TEMP_PROC_CANONICAL_PATH_ENT','TMPHTMLREPORTHEADER','TEMP_RESIP_REPORT_RESOURCE_NEE','TEMP_RESPONSE_DTA_EXECUTE','TMPIPCOPYOBJECT','TEMP_RESULTSPROC_RESULTS','TMPIPPGOBJECTPROPS','TEMP_RESULTS_PROC_CREPORT','TMPIPPGSEARCHPROPS','TEMP_ROWSIP_REPORT_PROTOCOL','TMPIP_REPORT_PROP2','TMPLABS','TEMP_ROWSPROC_RESOURCE_SCHEDUL','TMPLWRS','TEMP_ROWSPROC_RESULTS','TMPLWRSPRCSHWDFLTSCHED','TEMP_ROWS_IP_REPORT_SAS_JMP','TEMP_ROWS_PROC_CREPORT','TMPOBJSPROC_OBJECT_SEARCH_02','TEMP_ROWS_PROC_CREPORT_2','TMPPROCGETLISTENTRIES','TEMP_ROWS_TEMPPROC_RESULTS','TMPPROCGETPROP','TEMP_ROW_HEADERSIP_REPORT_PROT','TMPPROCSEARCHCOL','TEMP_SLIMSTAS_STUDIES','TMPPROCSEARCHCOLUMNS','TEMP_SLIMSTAT_CONDS','TMPPROCSEARCHOBJECTS','TEMP_SLIMSTAT_VALS','TMPPROCSEARCHPROPS','TEMP_STATUS','OBJ_PROCESS_LOCKS','OBJ_PROPS','OBJ_PROP_DEFS','OBJ_REPORT_TEMPLATES','OBJ_ROOT_OBJECTS','OBJ_SEARCH_ACCESS','OBJ_SEARCH_COLUMNS','OBJ_SEARCH_STATUSES','OBJ_SESSION_TRACES','OBJ_SPECIAL_OBJECTS','OBJ_STATE_AUTO_TRANSITIONS','OBJ_STATE_DEFS','OBJ_STATE_TRANSITIONS','OBJ_TRASH_ITEMS','OBJ_TYPES','OBJ_TYPE_PROPS','OBJ_TYPE_VIEWS','OBJ_USER_PROFILE_MESSAGES','OBJ_USER_PROFILE_OBJECTS','OBJ_USER_PROFILE_SEARCHES','OBJ_VIEWS','TEMP_SUBINT_PROC_CREPORT','TEMP_FN_PULL_CHAMBERS','TEMP_TEMPBROWSE_BATCH_LOTS','TEMP_TESTCATS_PROC_CREPORT','TEMP_HTMLIP_REPORT_ANNOTATIONS','TEMP_TESTSIP_REPORT_PROTOCOL','TEMP_HTMLIP_REPORT_BATCH','TEMP_TESTSIP_REPORT_PSR','TEMP_HTMLIP_REPORT_OBJECT','TEMP_TESTSIP_REPORT_SPEC_ALERT','TEMP_HTMLIP_REPORT_PRODUCT_HTM','TEMP_TESTSIP_REPORT_STUDY_RESU','TEMP_HTMLIP_REPORT_RESOURCE_NE','TEMP_TESTSPROC_RESULTS',
'TEMP_HTMLIP_REPORT_SAMPLE_INFO','TEMP_TESTS_PROC_CREPORT','TEMP_HTMLIP_REPORT_STUDY_HTML','TEMP_TEST_COUNTSIP_REPORT_SAMP','TEMP_HTMLIP_REPORT_STUDY_RESUL','TEMP_TEST_TYPESPROC_RESULTS_QU','TEMP_HTMLIP_REPORT_TABLE_COLUM','TEMP_TFIP_REPORT_STUDY_HTML','TEMP_INDEX_NAME','TEMP_VALSIP_REPORT_PROTOCOL','TEMP_INGRED2_IP_REPORT_SAS_JMP','TEMP_VALSPROC_RESOURCE_SCHEDUL','TEMP_INGRED3_IP_REPORT_SAS_JMP','TEMP_VALSPROC_RESULTS','ALTERNATE_RESULT_FAILURES','OBJ_VIEW_COLUMNS','OBJ_VIRTUAL_OBJECTS','ALTERNATE_TEST_SPECS','OPTION_DEFS','OPTION_VALUES','BATCH_RECORDS','PROTOCOL_INFO','PROTOCOL_PULL_CHAMBERS','PROTOCOL_STORAGES','CHAMBER_CONDITIONS','PROTOCOL_TEST_GROUPS','CUSTOM_LIST','RESULTS','RESULTS_TEST_FIELDS','FORMULATION_COMPONENTS','SLIM_TIME_ZONES','FORM_UPDATE_INFO','SPEC_ALERTS','TEMP_ALTSPECS_IP_COPY_OBJ_TF','GW_PKG_CODES','TEMP_ALTSPECS_IP_PP_OBJ_TF','TEMP_CURRENT_USES','INVENTORY_RECORDS','TEMP_DRUG_SUBSTIP_REPORT_STUDY','INVENTORY_XACT_TYPES','TEMP_SCIP_REPORT_STUDY_HTML','LABEL_LAYOUTS','TEMP_VALUE','LWRS','TESTS','TEST_FIELDS','TEST_FIELD_FORMATS','MESSAGES','TEST_FIELD_TERMS','TEST_OBS_TERMS','NONPULLS','TEST_OBS_TERMS2','NON_PULL_INVENTORY','TEST_REMARKS','OBJECTS','TEST_RESOURCES','OBJ_ACCESS_TYPES','TEST_TYPES','OBJ_ACES','TEST_TYPE_GROUPS','OBJ_ALIASES','TIME_INTERVALS','OBJ_CLSID_NAMES','TMPIP_RPR_LWR_FORM_OBJS','OBJ_DTAS','TMPIP_RPT_LWR_FORM_INITRES','OBJ_DTA_VALUES','TT_FORMULATIONS','OBJ_DTA_VALUES2','TT_FORM_COMP','OBJ_EVENTS','USERS','OBJ_EVENT_CODES','USER_PASSWORDS','OBJ_EVENT_TYPES','OBJ_FORMS','OBJ_LIST_DEFS','OBJ_LOGICAL_CHECKS','OBJ_LOGINS','OBJ_PROCESSES','OBJ_PROCESS_ENVIRONMENT','TEMP_STUDIESPROC_RESULTS','TMPPROCSEARCHROW','EXTENDED_PROPERTIES','IPRPTLWRFRMOBSRSLTS','IPRPTLWRFRMOBSTRM','REPORT_TEMPLATE','TEMP_ACESIP_PP_USER_COMMON','TEMP_BATCHES_PROC_CREPORT','TEMP_COLSIP_REPORT_PROTOCOL','TEMP_COLSPROC_RESOURCE_SCHEDUL','TEMP_COLSPROC_RESULTS','TEMP_COLS_IP_REPORT_SAS_JMP','TEMP_COLS_PROC_CREPORT','TEMP_COLS_PROC_CREPORT_2','TEMP_COMPONENTS','TEMP_CONDITIONSPROC_RESULTS','TEMP_STUDIESPROC_RESULTS_QUERY','TEMP_STUDIES_PROC_CREPORT','TEMP_SUBCOND_PROC_CREPORT','TEMP_CONDITIONS_PROC_CREPORT',
'TMPPROCSEARCHSTATES','TMPPROCSEARCHVALUE','TMPSTATUSPROC_OBJECT_SEARCH','TMPSTAT_RESULTRETSET','TMP_PROC_GET_TESTS_RESULTS','TEMP_CREATED_BY','TEMP_EVENTSIP_REPORT_EVENT_LOG','TEMP_FIELDSBROWSE_STUDY_FIELDS','TEMP_OBJ_ID_TABLE2','TMPOBJSCOPE_PROC_SEARCH','TEMP_PROC_SRG_REPORT_SPECEV','TEMP_INGRED4_IP_REPORT_SAS_JMP','TEMP_VALS_IP_REPORT_SAS_JMP','TEMP_INGRED_IP_REPORT_SAS_JMP','TEMP_VALS_PROC_CREPORT','TEMP_INGRED_PROC_CREPORT','TMPBROWSESEARCHCOLS','TEMP_INTERVALS_PROC_CREPORT','TMPBROWSESTUDIES','TEMP_IP_PP_SEARCH_VALUES','TMPBROWSESTUDIESRETSET','TEMP_IP_REPORT_DISCARD_WIN','TMPBROWSEUSRPROFILELABS','TEMP_LABSIP_PP_USER_COMMON','TMPBRSUSRPRFLEFAVS','TEMP_LABSPROC_SHOW_DEFAULT_SCH','TMPBRSWUSERSUSERINFO','TEMP_LINKSIP_REPORT_OBJECT','TMPBRWSEBATCHES','TEMP_LISTPROC_RESOURCE_SCHEDUL','TMPBRWSECCCODES','TEMP_LWR_NONPULL','TMPBRWSELAB','TEMP_NUMSIP_PARSE_NUMBER_ARRAY','TMPBRWSEPROTEMPCON','TEMP_NUMSIP_PARSE_NUMBER_LIST','TMPBRWSESPECALERTALERTS','TEMP_OBJS','TMPBRWSESPECALERTS','TEMP_OBJSIP_LIST_BATCH','TMPBRWSETAG','TEMP_OBJSIP_LIST_FORMULATION','TMPFOOTNOTES','TEMP_OBJ_ID_TABLE','TMPHTML','TMPHTMLREPORTFOOTER','TEMP_PROC_CANONICAL_PATH_ENT','TMPHTMLREPORTHEADER','TEMP_RESIP_REPORT_RESOURCE_NEE','TEMP_RESPONSE_DTA_EXECUTE','TMPIPCOPYOBJECT','TEMP_RESULTSPROC_RESULTS','TMPIPPGOBJECTPROPS','TEMP_RESULTS_PROC_CREPORT','TMPIPPGSEARCHPROPS','TEMP_ROWSIP_REPORT_PROTOCOL','TMPIP_REPORT_PROP2','TMPLABS','TEMP_ROWSPROC_RESOURCE_SCHEDUL','TMPLWRS','TEMP_ROWSPROC_RESULTS','TMPLWRSPRCSHWDFLTSCHED','TEMP_ROWS_IP_REPORT_SAS_JMP','TEMP_ROWS_PROC_CREPORT','TMPOBJSPROC_OBJECT_SEARCH_02','TEMP_ROWS_PROC_CREPORT_2','TMPPROCGETLISTENTRIES','TEMP_ROWS_TEMPPROC_RESULTS','TMPPROCGETPROP','TEMP_ROW_HEADERSIP_REPORT_PROT','TMPPROCSEARCHCOL','TEMP_SLIMSTAS_STUDIES','TMPPROCSEARCHCOLUMNS','TEMP_SLIMSTAT_CONDS','TMPPROCSEARCHOBJECTS','TEMP_SLIMSTAT_VALS','TMPPROCSEARCHPROPS','TEMP_STATUS','BITWISE','IP_LATE_LWR_NOTIFY','IP_PULL_LWR_NOTIFY','IP_SEND_EMAIL','PROC_CONFIG');
		ELSIF (v_SchemaName = 'SLIMUSER')		THEN
			t_PrivNameList     := ObjList
			t_PrivObjOwnerList := ObjList
			t_PrivObjNameList  := ObjList('LABEL_LAYOUTS','PROC_UPDATE_PASSWORD','PROC_PKI_SETLAB','PROC_PKI_GETPENDINGLWRS','PROC_PKI_REVISESAMPLETEMP','PROC_SET_TESTINFO','PROC_RETEST','PROC_PKI_GETLWRSTATUS','PROC_LWR_GET_STATUS','PROC_PKI_GETSAMPLETEMP','PROC_DELETE_LWR_COLLECTION','PROC_SRG_SETTEMPLATEHIDDEN','PROC_CHECK_USER_ROLE','PROC_COPY_TESTS','PROC_PKI_LOCKOBJECT','PROC_ADJUST_NONPULL_SCHEDULE','PROC_PKI_COPYGLOBSAMPLETEMP','PROC_SEARCH__','PROC_PKI_SETTESTFIELD','PROC_SET_EXTENDED_PROPS','PROC_PKI_SETREADONLYFLAG','PROC_GET_RESCHED_DATES','PROC_OBJECT_SEARCH_02','PROC_DELETE','PROC_PKI_UNLOCKOBJECT','PROC_CUSTOM_REPORTS','PROC_LOOKUP','PROC_SRG_GETTEMPLATE','PROC_GET_REPORT_TYPES','PROC_PKI_SETCLIENT','PROC_TEST_SCHEDULE','PROC_PKI_SETLWRPULLED','PROC_LWR_CONFIRM_CLOSE','PROC_SRG_SETGLOBALTEMPLATE','PROC_PKI_GETFORMULATIONS','PROC_RESULT_SPECFAILED','PROC_FORM_SET_VALUE','PROC_LWR_CLOSE','PROC_SET_TIME_INTERVAL_STATUS','PROC_SET_LWR_COLLECTION','PROC_SET_RESULT','PROC_PKI_SETCOUNTRY','PROC_LWR_RESULTS','PROC_PKI_SETUSER','PROC_DIRECT_COPY','PROC_GET_NONPULL_COLLECTION','PROC_PKI_SETPRODUCT','PROC_GET_STUDY_PROTOCOL','PROC_RESTORE','IP_REPORT_STUDY_RESULTS','PROC_PKI_SETBATCH','PROC_PKI_GETLWRS','PROC_LWR_FORM','PROC_IMPORT_RESULTS','PROC_STUDY_EXTERNAL_LABELS','PROC_SRG_RENAMETEMPLATE','FN_LWR_SECURITY','PROC_FLAG_TEST','PROC_PKI_GETSTATUS','PROC_SLIMSTAT_RESULTS','PROC_PKI_GETPRODFAMILY','PROC_SET_LWR_SAMPLE_ID','PROC_DELETE_TESTING','PROC_DTA_SET_VALUE','PROC_FAVORITES_REMOVE','PROC_GET_USERNAME','PROC_GET_INFO_MSGS','PROC_PKI_GETPACKAGINGITEMS','PROC_FORMULATION_SEARCH','PROC_GET_LIST_ENTRIES','PROC_PKI_SETLWRAPPROVED','PROC_CREATE_TEST','PROC_PKI_GETLABS','PROC_PKI_SETTESTVERIFIED','PROC_PKI_SETMANUFACTURINGSITE','PROC_PKI_GETANALYST','PROC_GET_PROPERTIES_REVISE','PROC_PKI_SETFORMULATION','PROC_CHECK_OBJECT_EXISTS','PROC_PKI_SETPRODFAMILY','PROC_CHECK_RESULT','PROC_PKI_GETCLIENTS','PROC_SET_ITEM_STATUS','PROC_ADD_EVENT',
'PROC_IMPORT_TESTINFO','PROC_FAVORITES_ADD','PROC_PKI_GETSTUDYSTATUSCOUNTS','PROC_SRG_GETTEMPLATEPROPERTIES','PROC_PKI_SETRESULTSQUAL','PROC_PKI_COPYGLOBTESTCAT','IP_GET_OPTION_INT','PROC_USER_LOGOUT','PROC_SLIM_INIT','PROC_LWR_LABELS','PROC_PKI_SETLWRREADONLYFLAG','PROC_DTA_DELETE','PROC_CHECK_CHANGECONTROL','PROC_PKI_SETMETHSTATUS','PROC_DTA_CREATE','PROC_PKI_GETGLOBTC','PROC_CHECK_LWR_VERIFY','PROC_NONPULL_SET_STATUS','PROC_PKI_GETFRMLCURUSETAGS','PROC_BROWSE2','PROC_SHOW_DEFAULT_SCHEDULE','PROC_DTA_APPEND','PROC_ADJUST_LWR_SCHEDULE','PROC_PKI_GETSUPPLIERS','PROC_PKI_GETPRODUCTS','PROC_UPDATE_USER_LOGIN_COUNT','PROC_PKI_GETBATCHES','PROC_PKI_GETLWRCOUNT','PROC_PKI_SETSUPPLIER','PROC_PKI_GETCHANGECONTROLS','PROC_CANONICAL_PATH','PROC_GET_PROPERTIES_COPY','PROC_DTA_EXECUTE','PROC_PKI_GETMANUFACTURINGSITES','PROC_PKI_GETTGSTATUS','PROC_GET_LWR_COLLECTION','PROC_UNLOCK_OBJECT','PROC_PKI_SETOBJECTVISIBLE','PROC_RESULTS','PROC_GET_PROPERTIES','PROC_PKI_GETASSOCLWR','PROC_DUPLICATE_FORMULATIONS','PROC_GET_LWR_SAMPLE_INFO','PROC_PKI_GETUSERS','PROC_CHECK_PASSWORD','PROC_PKI_SETSPECSTATUS','PROC_PKI_GETCOUNTRIES','PROC_CHANGE_PASSWORD','PROC_LWR_EXTERNAL_LABELS','PROC_PKI_GETBATCHCURUSETAGS','PROC_PUT_PROPERTIES','PROC_PKI_FORMSETVALUE','PROC_PKI_GETRESULTSQUAL','PROC_CHECK_TG_EDITED','PROC_DELETE_TEST','PROC_PKI_GETSPECIALOBJECTS','PROC_SRG_SETUSERTEMPLATE','PROC_SS_GETUSERS','PROC_PKI_GETGLOBSAMPLETEMP','PROC_PKI_SETLWRVERIFIED','PROC_PKI_SETTESTCAT','PROC_LWR_SET_STATUS','PROC_NONPULL_GET_STATUS','PROC_BROWSE3','PROC_FAILED_LOGIN','PROC_BROWSE','PROC_CHECK_USER_LOGIN_DISABLED','PROC_STUDY_LABELS','PROC_REPORT','PROC_PKI_GETSTUDIES','PROC_PKI_SETSTUDY','PROC_PKI_CHECKLWRSEC','PROC_PKI_GETTESTSTATUS','PROC_PKI_SETTCREF','PROC_GET_REPORT_INTERFACE_INFO','PROC_PKI_SETSAMPLETEMPLATE','PROC_RESULTS_QUERY','PROC_INIT','PROC_PKI_GETSPECSTATUS','PROC_GET_EXTENDED_PROPS','PROC_PKI_GETMETHODSTATUS','PROC_RESULTS_QUERY_02','PROC_GET_LWR_SAMPLE_ID','PROC_LOCK_OBJECT',
'PROC_GET_TESTS','PROC_SRG_REPORT','PROC_PKI_GETTESTFIELDFORMAT','PROC_GET_TESTINFO','PROC_PKI_SETALTSPEC','PROC_SET_SPEC_ALERT_STATUS','PROC_PKI_GETCUSTOMVIEWS','PROC_GET_INITIAL_LWRS','PROC_REASSIGN_LABWORK','PROC_RESOURCE_SCHEDULE','PROC_QUERY_CUSTOM','PROC_CONFIG','PROC_UNLOCK','PROC_WHO_AM_I','PROC_FORM_QUERY_EDIT','PROC_SLIM_TERM','PROC_COMMAND','PROC_TERM','IP_AUTO_PULL_LWRS','IP_SESSION_TRACE','PROC_SS_GETVERSION','IP_AUTO_PULL_EXT_LWRS','IP_AUTO_REQ_LWRS');
                        SELECT COUNT (*) INTO v_Count FROM dba_objects WHERE owner = 'SLIM' AND object_type = 'FUNCTION' AND object_name = 'PROC_PKI_GETPRODUCTTCS'; -- Check for this function.  Added as part of CWR0060.sql but that script didn't update the schema version, thus we must check for the function and add it to this list if it is present.
                        IF (v_Count = 1)        THEN -- We found the function proc_pki_getproducttcs so add the necessary entries to the lists.
                                t_PrivNameList.EXTEND(1);
                                t_PrivNameList(t_PrivNameList.LAST) := 'EXECUTE';

                                t_PrivObjOwnerList.EXTEND(1);
                                t_PrivObjOwnerList(t_PrivObjOwnerList.LAST) := 'SLIM';

                                t_PrivObjNameList.EXTEND(1);
                                t_PrivObjNameList(t_PrivObjNameList.LAST) := 'PROC_PKI_GETPRODUCTTCS';
                        END IF;
		END IF;

		v_ExpectedNo := t_PrivNameList.COUNT;
		SELECT COUNT(PRIVILEGE) INTO v_Count FROM DBA_TAB_PRIVS WHERE GRANTEE = v_SchemaName;
		IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE (v_SchemaName||' has been granted the expected number of object privileges: ('||v_ExpectedNo||' expected, '||v_Count||' found).');
		ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE ('!!!!! ERROR: '||v_SchemaName||' has not been granted the expected number of object privileges: ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
		ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE (v_SchemaName||' has been granted more than the expected number of object privileges: ('||v_ExpectedNo||' expected, '||v_Count||' found).');
		END IF;
	
		FOR indx2 IN 1.. t_PrivNameList.COUNT
		LOOP
			v_PrivName := t_PrivNameList(indx2);
			v_ObjOwner := t_PrivObjOwnerList(indx2);
			v_ObjName  := t_PrivObjNameList(indx2);
			SELECT COUNT(*) INTO v_Count FROM dba_tab_privs WHERE grantee = v_SchemaName AND privilege = v_PrivName AND owner = v_ObjOwner AND table_name = v_ObjName;
			IF (v_Count = 1)	THEN	DBMS_OUTPUT.PUT_LINE ('-- '||v_SchemaName||' has been granted '||v_PrivName||' on '||v_ObjOwner||'.'||v_ObjName);
			ELSE				DBMS_OUTPUT.PUT_LINE ('-- !!!!! ERROR: '||v_SchemaName||' has NOT been granted '||v_PrivName||' on '||v_ObjOwner||'.'||v_ObjName||'!');
			END IF;
		END LOOP;

		DBMS_OUTPUT.PUT_LINE ('.');
	END LOOP;
END;
/

PROMPT
PROMPT _________________________________________________________________________________________________
PROMPT Determining the number of objects owned by the NuGenesis Stability schemas
PROMPT
PROMPT Number of objects owned by the NuGenesis Stability schemas:
SELECT owner, COUNT(*) "ObjCount" FROM dba_objects WHERE owner IN ('SLIM', 'SLIM_ADMIN') AND object_name NOT LIKE 'BIN$' GROUP BY owner ORDER BY owner;

PROMPT
PROMPT
PROMPT Number of objects owned by the NuGenesis schemas broken down by object type:
SELECT owner, object_type, COUNT(*) "ObjCount" FROM dba_objects WHERE owner IN ('SLIM', 'SLIM_ADMIN') AND object_name NOT LIKE 'BIN$' GROUP BY owner, object_type ORDER BY owner, object_type;

PROMPT
PROMPT _________________________________________________________________________________________________
PROMPT Determining whether the expected tables are present in the NuGenesis Stability schema...
PROMPT
DECLARE
v_Count		PLS_INTEGER := 0;
v_tab		SYS.DBA_TABLES.TABLE_NAME%TYPE;
v_ExpectedNo	PLS_INTEGER;
v_SchemaName	VARCHAR2(500) := 'SLIM';

TYPE ObjList	IS TABLE OF VARCHAR2(10000);
t_TableList	ObjList;

BEGIN
	t_TableList := ObjList('ALTERNATE_RESULT_FAILURES','ALTERNATE_TEST_SPECS','BATCH_RECORDS','CUSTOM_LIST','FORMULATION_COMPONENTS','FORM_UPDATE_INFO','GW_PKG_CODES','INVENTORY_RECORDS','INVENTORY_XACT_TYPES','IPRPTLWRFRMOBSRSLTS','IPRPTLWRFRMOBSTRM','LABEL_LAYOUTS','LWRS','MESSAGES','OBJECTS','OBJ_ACCESS_TYPES','OBJ_ACES','OBJ_ALIASES','OBJ_CLSID_NAMES','OBJ_DTAS','OBJ_DTA_VALUES','OBJ_DTA_VALUES2','OBJ_EVENTS','OBJ_EVENT_CODES','OBJ_EVENT_TYPES','OBJ_FORMS','OBJ_LIST_DEFS','OBJ_LOGICAL_CHECKS','OBJ_LOGINS','OBJ_PROCESSES','OBJ_PROCESS_ENVIRONMENT','OBJ_PROCESS_LOCKS','OBJ_PROPS','OBJ_PROP_DEFS','OBJ_REPORT_TEMPLATES','OBJ_ROOT_OBJECTS','OBJ_SESSION_TRACES','OBJ_SPECIAL_OBJECTS','OBJ_STATE_AUTO_TRANSITIONS','OBJ_STATE_DEFS','OBJ_STATE_TRANSITIONS','OBJ_TRASH_ITEMS','OBJ_TYPES','OBJ_TYPE_PROPS','OBJ_TYPE_VIEWS','OBJ_USER_PROFILE_MESSAGES','OBJ_USER_PROFILE_OBJECTS','OBJ_USER_PROFILE_SEARCHES','OBJ_VIEWS','OBJ_VIEW_COLUMNS','OBJ_VIRTUAL_OBJECTS','OPTION_DEFS','OPTION_VALUES','PROTOCOL_INFO','PROTOCOL_STORAGES','PROTOCOL_TEST_GROUPS','RESULTS','SPEC_ALERTS','TEMP_ACESIP_PP_USER_COMMON','TEMP_ALTSPECS_IP_COPY_OBJ_TF','TEMP_ALTSPECS_IP_PP_OBJ_TF','TEMP_BATCHES_PROC_CREPORT','TEMP_COLSIP_REPORT_PROTOCOL','TEMP_COLSPROC_RESOURCE_SCHEDUL','TEMP_COLSPROC_RESULTS','TEMP_COLS_IP_REPORT_SAS_JMP','TEMP_COLS_PROC_CREPORT','TEMP_COLS_PROC_CREPORT_2','TEMP_COMPONENTS','TEMP_CONDITIONSPROC_RESULTS','TEMP_CONDITIONS_PROC_CREPORT','TEMP_CREATED_BY','TEMP_CURRENT_USES','TEMP_DRUG_SUBSTIP_REPORT_STUDY','TEMP_EVENTSIP_REPORT_EVENT_LOG','TEMP_FIELDSBROWSE_STUDY_FIELDS','TEMP_HTMLIP_REPORT_ANNOTATIONS','TEMP_HTMLIP_REPORT_BATCH','TEMP_HTMLIP_REPORT_OBJECT','TEMP_HTMLIP_REPORT_PRODUCT_HTM','TEMP_HTMLIP_REPORT_RESOURCE_NE','TEMP_HTMLIP_REPORT_SAMPLE_INFO','TEMP_HTMLIP_REPORT_STUDY_HTML','TEMP_HTMLIP_REPORT_STUDY_RESUL','TEMP_HTMLIP_REPORT_TABLE_COLUM','TEMP_INDEX_NAME','TEMP_INGRED2_IP_REPORT_SAS_JMP','TEMP_INGRED3_IP_REPORT_SAS_JMP','TEMP_INGRED4_IP_REPORT_SAS_JMP','TEMP_INGRED_IP_REPORT_SAS_JMP',
'TEMP_INGRED_PROC_CREPORT','TEMP_INTERVALS_PROC_CREPORT','TEMP_LABSIP_PP_USER_COMMON','TEMP_LABSPROC_SHOW_DEFAULT_SCH','TEMP_LINKSIP_REPORT_OBJECT','TEMP_LISTPROC_RESOURCE_SCHEDUL','TEMP_NUMSIP_PARSE_NUMBER_ARRAY','TEMP_NUMSIP_PARSE_NUMBER_LIST','TEMP_OBJS','TEMP_OBJSIP_LIST_BATCH','TEMP_OBJSIP_LIST_FORMULATION','TEMP_RESIP_REPORT_RESOURCE_NEE','TEMP_RESPONSE_DTA_EXECUTE','TEMP_RESULTSPROC_RESULTS','TEMP_RESULTS_PROC_CREPORT','TEMP_ROWSIP_REPORT_PROTOCOL','TEMP_ROWSPROC_RESOURCE_SCHEDUL','TEMP_ROWSPROC_RESULTS','TEMP_ROWS_IP_REPORT_SAS_JMP','TEMP_ROWS_PROC_CREPORT','TEMP_ROWS_PROC_CREPORT_2','TEMP_ROWS_TEMPPROC_RESULTS','TEMP_ROW_HEADERSIP_REPORT_PROT','TEMP_SCIP_REPORT_STUDY_HTML','TEMP_SLIMSTAS_STUDIES','TEMP_SLIMSTAT_CONDS','TEMP_SLIMSTAT_VALS','TEMP_STATUS','TEMP_STUDIESPROC_RESULTS','TEMP_STUDIESPROC_RESULTS_QUERY','TEMP_STUDIES_PROC_CREPORT','TEMP_TEMPBROWSE_BATCH_LOTS','TEMP_TESTCATS_PROC_CREPORT','TEMP_TESTSIP_REPORT_PROTOCOL','TEMP_TESTSIP_REPORT_PSR','TEMP_TESTSIP_REPORT_SPEC_ALERT','TEMP_TESTSIP_REPORT_STUDY_RESU','TEMP_TESTSPROC_RESULTS','TEMP_TESTS_PROC_CREPORT','TEMP_TEST_COUNTSIP_REPORT_SAMP','TEMP_TEST_TYPESPROC_RESULTS_QU','TEMP_TFIP_REPORT_STUDY_HTML','TEMP_VALSIP_REPORT_PROTOCOL','TEMP_VALSPROC_RESOURCE_SCHEDUL','TEMP_VALSPROC_RESULTS','TEMP_VALS_IP_REPORT_SAS_JMP','TEMP_VALS_PROC_CREPORT','TEMP_VALUE','TESTS','TEST_FIELDS','TEST_FIELD_FORMATS','TEST_FIELD_TERMS','TEST_OBS_TERMS','TEST_OBS_TERMS2','TEST_REMARKS','TEST_RESOURCES','TEST_TYPES','TEST_TYPE_GROUPS','TIME_INTERVALS','TMPBROWSESTUDIES','TMPBROWSESTUDIESRETSET','TMPBROWSEUSRPROFILELABS','TMPBRSUSRPRFLEFAVS','TMPBRSWUSERSUSERINFO','TMPBRWSEBATCHES','TMPBRWSECCCODES','TMPBRWSELAB','TMPBRWSESPECALERTALERTS','TMPBRWSESPECALERTS','TMPBRWSETAG','TMPFOOTNOTES','TMPHTML','TMPHTMLREPORTFOOTER','TMPHTMLREPORTHEADER','TMPIPCOPYOBJECT','TMPIPPGOBJECTPROPS','TMPIP_REPORT_PROP2','TMPIP_RPR_LWR_FORM_OBJS','TMPIP_RPT_LWR_FORM_INITRES','TMPLABS','TMPLWRS','TMPLWRSPRCSHWDFLTSCHED','TMPOBJSPROC_OBJECT_SEARCH_02','TMPPROCGETLISTENTRIES','TMPPROCGETPROP','TMPSTATUSPROC_OBJECT_SEARCH','TMPSTAT_RESULTRETSET','TMP_PROC_GET_TESTS_RESULTS',
'TT_FORMULATIONS','TT_FORM_COMP','USERS','USER_PASSWORDS','TEMP_PROC_SRG_REPORT_SPECEV','RESULTS_TEST_FIELDS','SLIM_TIME_ZONES','TEMP_PROC_CANONICAL_PATH_ENT','TMPBRWSEPROTEMPCON','PROTOCOL_PULL_CHAMBERS','TEMP_OBJ_ID_TABLE',
'NONPULLS','OBJ_SEARCH_COLUMNS','OBJ_SEARCH_STATUSES','TEMP_IP_PP_SEARCH_VALUES','TEMP_LWR_NONPULL','TMPIPPGSEARCHPROPS','TMPPROCSEARCHCOL','TMPPROCSEARCHCOLUMNS','TMPPROCSEARCHOBJECTS','TMPPROCSEARCHPROPS','TMPPROCSEARCHROW','TMPPROCSEARCHSTATES','TMPPROCSEARCHVALUE','REPORT_TEMPLATE','TMPBROWSESEARCHCOLS','EXTENDED_PROPERTIES','TEMP_FN_PULL_CHAMBERS','NON_PULL_INVENTORY','TEMP_IP_REPORT_DISCARD_WIN','TEMP_SUBCOND_PROC_CREPORT','TEMP_SUBINT_PROC_CREPORT','CHAMBER_CONDITIONS','OBJ_SEARCH_ACCESS','TEMP_OBJ_ID_TABLE2','TMPOBJSCOPE_PROC_SEARCH');
	v_ExpectedNo := t_TableList.COUNT;

	SELECT COUNT(*) INTO v_Count FROM DBA_OBJECTS WHERE OWNER = v_SchemaName AND OBJECT_TYPE = 'TABLE' AND OBJECT_NAME NOT LIKE '%_BAK' AND object_name NOT LIKE 'BIN%';
	IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE(v_SchemaName||' owns the expected number of tables ('||v_ExpectedNo||' expected, '||v_Count||' found)');
	ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: '||v_SchemaName||' owns less than the expected number of tables ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
	ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE(v_SchemaName||' owns more than the expected number of tables ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
	END IF;

	FOR indx IN 1 .. t_TableList.COUNT
	LOOP
		v_tab := t_TableList(indx);
		SELECT COUNT(*) INTO v_Count FROM dba_tables WHERE owner = v_SchemaName AND table_name = v_tab;
		IF (v_Count = 1)	THEN	DBMS_OUTPUT.PUT_LINE('-- table '||v_SchemaName||'.'||v_tab||' is present');
		ELSE				DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: table '||v_SchemaName||'.'||v_tab||' is NOT present!');
		END IF;
	END LOOP;
END;
/

PROMPT
PROMPT __________________________________________________________________________________________
PROMPT Checking indexes in the SLIM schema...
PROMPT
DECLARE
v_IndexType	dba_indexes.index_type%TYPE;
v_IndexStatus	dba_indexes.status%TYPE;
v_IndexTabName	dba_indexes.table_name%TYPE;
v_ExpectedNo	PLS_INTEGER;
v_Count		PLS_INTEGER;
v_SchemaName	VARCHAR2(500);
TYPE ObjList		IS TABLE OF VARCHAR2(500);
TYPE NumList		IS TABLE OF NUMBER;
t_IndexNameList		ObjList;
t_IndexTabNameList	OBjList;
t_IndexTypeList		ObjList;
t_ExpectedNoList	NumList;

BEGIN
	-- Check the total number of indexes owned by the schema, and then break it down by index type
	v_SchemaName := 'SLIM';
	v_ExpectedNo := 217;
	SELECT COUNT(*) INTO v_Count FROM DBA_INDEXES WHERE owner = v_SchemaName;
	IF (v_Count >= v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The expected number of indexes are present in the '||v_SchemaName||' schema ('||v_ExpectedNo||' expected, '||v_Count||' found)');
	ELSE					DBMS_OUTPUT.PUT_LINE('!!! WARNING: The expected number of indexes are NOT present in the '||v_SchemaName||' schema ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
	END IF;

	t_IndexTypeList  := ObjList('DOMAIN','NORMAL','CLUSTER','LOB','IOT - TOP');
	t_ExpectedNoList := NumList(0,       215,     0,        2,    0);
	FOR indx IN 1 .. t_IndexTypeList.COUNT
	LOOP
		v_IndexType  := t_IndexTypeList(indx);
		v_ExpectedNo := t_ExpectedNoList(indx);
		SELECT COUNT(*) INTO v_Count FROM DBA_INDEXES WHERE owner = v_SchemaName AND index_type = v_IndexType;
		IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('-- '||v_SchemaName||' owns the expected number of '||v_IndexType||' indexes ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: '||v_SchemaName||' owns less than the expected number of '||v_IndexType||' indexes ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
		ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('-- '||v_SchemaName||' owns more than the expected number of '||v_IndexType||' indexes ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		END IF;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE ('.');
	DBMS_OUTPUT.PUT_LINE ('.');

	-- Now look for specific indexes owned by the schema based on name, owner, and table name
	t_IndexTypeList := ObjList
	t_IndexNameList := ObjList('AWA_SYS_ACCESS_ID_2D27B809','AWA_SYS_ALLOCATE_3D5E1FD2','AWA_SYS_AMOUNT_32E0915F','AWA_SYS_ANALYST_403A8C7D','AWA_SYS_APPID_3E52440B','AWA_SYS_COMP_ID_30F848ED','AWA_SYS_CONDITION_38996AB5','AWA_SYS_COND_ID_32E0915F','AWA_SYS_COND_ID_3E52440B','AWA_SYS_COND_ID_3F466844','AWA_SYS_COPY_LWR_ID_3E52440B','AWA_SYS_CRID_24927208','AWA_SYS_CRID_300424B4','AWA_SYS_DATE_COMPLETED_403A8C7','AWA_SYS_DESCRIPTION_1_300424B4','AWA_SYS_DESCRIPTION_2_300424B4','AWA_SYS_DTA_ID_0DAF0CB0','AWA_SYS_EVENT_TYPE_33D4B598','AWA_SYS_FOOTNOTE1_31EC6D26','AWA_SYS_FOOTNOTE2_31EC6D26','AWA_SYS_FORMAT_3A81B327','AWA_SYS_ICON_267ABA7A','AWA_SYS_INITIAL_DATE_3F466844','AWA_SYS_INTERVAL_38996AB5','AWA_SYS_INTERVAL_3E52440B','AWA_SYS_INT_VAL_0DAF0CB0','AWA_SYS_INVENTORY_ID_3E52440B','AWA_SYS_INVENTORY_ID_3F466844','AWA_SYS_LAB_ID_3D5E1FD2','AWA_SYS_LOT_ID_30F848ED','AWA_SYS_METHOD_REF_403A8C7D','AWA_SYS_NAME_0DAF0CB0','AWA_SYS_NAME_182C9B23','AWA_SYS_NAME_267ABA7A','AWA_SYS_NAME_300424B4','AWA_SYS_NOTEBOOK_REF_403A8C7D','AWA_SYS_OBJ_ID_2D27B809','AWA_SYS_OBJ_ID_35BCFE0A','AWA_SYS_OBJ_ID_36B12243','AWA_SYS_OPTION_ID_2C3393D0','AWA_SYS_ORD_29572725','AWA_SYS_OWNER_300424B4','AWA_SYS_POTENCY_31EC6D26','AWA_SYS_PROP_ID_0DAF0CB0','AWA_SYS_PROP_ID_286302EC','AWA_SYS_PROP_ID_33D4B598','AWA_SYS_PROTOCOL_EDITABLE_267A','AWA_SYS_REQID_3E52440B','AWA_SYS_SCOPE_276EDEB3','AWA_SYS_SCOPE_3A81B327','AWA_SYS_SCOPE_3D5E1FD2','AWA_SYS_SECTION_108B795B','AWA_SYS_SECTION_173876EA','AWA_SYS_SEQUENCE_173876EA','AWA_SYS_SEQUENCE_300424B4','AWA_SYS_SEQUENCE_403A8C7D','AWA_SYS_SEQ_31EC6D26','AWA_SYS_SEQ_398D8EEE','AWA_SYS_SHOW_2E1BDC42','AWA_SYS_SOURCE_286302EC','AWA_SYS_STATUS1_2E1BDC42','AWA_SYS_STATUS2_2E1BDC42','AWA_SYS_STATUS_267ABA7A','AWA_SYS_STATUS_300424B4','AWA_SYS_STATUS_403A8C7D','AWA_SYS_STRING_34C8D9D1','AWA_SYS_STR_VAL_0DAF0CB0','AWA_SYS_STUDY_ID_1DE57479','AWA_SYS_SUBSEQ_0DAF0CB0','AWA_SYS_T1S1_37A5467C','AWA_SYS_T1S2_37A5467C','AWA_SYS_T2S1_37A5467C','AWA_SYS_T2_37A5467C','AWA_SYS_TERM_ID_1DE57479','AWA_SYS_TERM_ID_398D8EEE','AWA_SYS_TEST_ID_412EB0B6','AWA_SYS_TEST_TYPE_38996AB5','AWA_SYS_TF_ID_398D8EEE','AWA_SYS_TF_ID_412EB0B6','AWA_SYS_TRANSFER_CHAMBER_ID_32','AWA_SYS_TT_ID_403A8C7D','AWA_SYS_TYPE_ID_2_2B3F6F97','AWA_SYS_USER_ID_276EDEB3','AWA_SYS_USER_ID_2F10007B','AWA_SYS_USER_ID_32E0915F','AWA_SYS_USER_ID_33D4B598','AWA_SYS_VALUE1_1DE57479','AWA_SYS_VALUE2_1DE57479','AWA_SYS_VERIFIED_BY_403A8C7D','AWA_SYS_VIEW_ID_29572725','AWA_SYS_XACT_TYPE_32E0915F','CL_BATCH_RECORDS','CL_FORMULATION_COMPONENTS','CL_INVENTORY_RECORDS','CL_LWRS','CL_OBJECTS','CL_OBJ_ACES','CL_OBJ_ALIASES','CL_OBJ_EVENTS','CL_OBJ_LOGINS','CL_OBJ_PROCESS_ENVIRONMENT','CL_OBJ_PROPS','CL_OBJ_USER_PROFILE_SEARCHES',
	'CL_PROTOCOL_TEST_GROUPS','CL_SPEC_ALERTS','CL_TESTS','CL_TEST_REMARKS','CL_USERS','CL_dta_values2','IX_FORMULATION_COMPONENTS','IX_INVENTORY_RECORDS_CHAMBER','IX_LWRS_LAB_ID','IX_LWRS_SCHEDULED','IX_LWRS_STATUS','IX_OBJS_TYPE','IX_OBJ_LOGINS_SPID','IX_OBJ_PROPS_PROP_ID','IX_OBJ_PROPS_REFERENCE_ID','IX_OBJ_PROPS_USER_ID','IX_OBJ_STATE_DEFS','IX_PROTOCOL_INFO','IX_PROT_TEST_GROUP_ID','IX_REPORT_TEMPLATE_USER','IX_SPEC_ALERTS','IX_SPEC_ALERTS_OBJ_ID','IX_TEST_FIELDS_TT_ID','IX_TEST_RESOURCES_RES_ID','IX_TEST_TYPES_PRODUCT_ID','PK_ALTERNATE_RESULT_FAILURES','PK_ALTERNATE_TEST_SPECS','PK_BATCH_RECORDS','PK_DTAS','PK_EXTENDED_PROPERTIES','PK_FORM_UPDATE_INFO_2__14','PK_GW_PKG_CODES_1__13','PK_INVENTORY_RECORDS','PK_LWRS','PK_MESSAGES','PK_NONPULLS','PK_NON_PULL_INVENTORY','PK_OBJECTS','PK_OBJ_ACCESS_TYPES','PK_OBJ_EVENTS','PK_OBJ_EVENT_CODES','PK_OBJ_EVENT_TYPES','PK_OBJ_FIELD_DEFS','PK_OBJ_FORMS','PK_OBJ_LOCKS','PK_OBJ_PROCESSES','PK_OBJ_REPORT_TEMPLATES','PK_OBJ_SEARCH_ACCESS','PK_OBJ_SEARCH_COLUMNS','PK_OBJ_SEARCH_STATUSES','PK_OBJ_STATE_AUTO_TRANSIT1__13','PK_OBJ_STATUS_DEFS','PK_OBJ_STATUS_TRANSITIONS','PK_OBJ_TRASH_ITEMS','PK_OBJ_TYPES','PK_OBJ_TYPE_PROPERTIES','PK_OBJ_TYPE_REPORTS','PK_OBJ_USER_PROFILE_MESSAGES','PK_OBJ_USER_PROFILE_OBJECTS','PK_OBJ_USER_PROFILE_SEARCHES','PK_OBJ_VIEWS','PK_OBJ_VIEW_COLUMNS','PK_OBJ_VIRTUAL_OBJECTS','PK_OPTION_DEFS','PK_OPTION_VALUES','PK_PROTOCOL_STORAGES','PK_PROTOCOL_TEST_GROUPS','PK_REPORT_TEMPLATE','PK_RESULTS','PK_RES_TEST_FIELDS','PK_SESSION_TRACES','PK_SLIM_TIME_ZONES','PK_SPEC_ALERTS','PK_TESTS','PK_TEST_FIELDS','PK_TEST_FIELD_FORMATS','PK_TEST_FIELD_TERMS','PK_TEST_OBS_TERMS2_1__14','PK_TEST_RESOURCES','PK_TEST_TYPES','PK_TEST_TYPE_GROUPS','PK_TMPPROCSEARCHCOL','PK_TMPPROCSEARCHCOLUMNS','PK_TMPPROCSEARCHOBJECTS','PK_TMPPROCSEARCHPROPS','PK_TMPPROCSEARCHROW','PK_TMPPROCSEARCHSTATES','PK_TMPPROCSEARCHVALUE','PK_USERS','PK___10__10','PK___1__11','PK___1__12','PK___2__12','PK___2__14','PK___3__13','PK___5__13','PROTOCOL_PULL_CHAMBERS_PK','TMPBROWSESTUDIES_OJB_ID','UQ_USERS_1__12');
	t_IndexTabNameList := ObjList('OBJ_ACES','TEST_TYPES','INVENTORY_RECORDS','TESTS','LWRS','BATCH_RECORDS','PROTOCOL_INFO','INVENTORY_RECORDS','LWRS','PROTOCOL_STORAGES','LWRS','OBJ_EVENT_CODES','OBJECTS','TESTS','OBJECTS','OBJECTS','OBJ_DTA_VALUES','OBJ_EVENTS','FORMULATION_COMPONENTS','FORMULATION_COMPONENTS','TEST_FIELDS','OBJ_STATE_DEFS','PROTOCOL_STORAGES','PROTOCOL_INFO','LWRS','OBJ_DTA_VALUES','LWRS','PROTOCOL_STORAGES','TEST_TYPES','BATCH_RECORDS','TESTS','OBJ_DTA_VALUES','OBJ_TYPES','OBJ_STATE_DEFS','OBJECTS','TESTS','OBJ_ACES','OBJ_ROOT_OBJECTS','OBJ_SPECIAL_OBJECTS','OPTION_VALUES','OBJ_TYPE_VIEWS','OBJECTS','FORMULATION_COMPONENTS','OBJ_DTA_VALUES','OBJ_TYPE_PROPS','OBJ_EVENTS','OBJ_STATE_DEFS','LWRS','OBJ_TRASH_ITEMS','TEST_FIELDS','TEST_TYPES','OBJ_FORMS','OBJ_REPORT_TEMPLATES','OBJ_REPORT_TEMPLATES','OBJECTS','TESTS','FORMULATION_COMPONENTS','RESULTS','OBJ_STATE_TRANSITIONS','OBJ_TYPE_PROPS','OBJ_STATE_TRANSITIONS','OBJ_STATE_TRANSITIONS','OBJ_STATE_DEFS','OBJECTS','TESTS','OBJ_PROPS','OBJ_DTA_VALUES','TEST_FIELD_TERMS','OBJ_DTA_VALUES','OBJ_STATE_AUTO_TRANSITIONS','OBJ_STATE_AUTO_TRANSITIONS','OBJ_STATE_AUTO_TRANSITIONS','OBJ_STATE_AUTO_TRANSITIONS','TEST_FIELD_TERMS','RESULTS','SPEC_ALERTS','PROTOCOL_INFO','RESULTS','SPEC_ALERTS','INVENTORY_RECORDS','TESTS','OBJ_VIRTUAL_OBJECTS','OBJ_TRASH_ITEMS','OBJ_VIEWS','INVENTORY_RECORDS','OBJ_EVENTS','TEST_FIELD_TERMS','TEST_FIELD_TERMS','TESTS','OBJ_TYPE_VIEWS','INVENTORY_RECORDS','BATCH_RECORDS','FORMULATION_COMPONENTS','INVENTORY_RECORDS','LWRS','OBJECTS','OBJ_ACES','OBJ_ALIASES','OBJ_EVENTS','OBJ_LOGINS','OBJ_PROCESS_ENVIRONMENT','OBJ_PROPS','OBJ_USER_PROFILE_SEARCHES','PROTOCOL_TEST_GROUPS','SPEC_ALERTS','TESTS','TEST_REMARKS','USERS','OBJ_DTA_VALUES2','FORMULATION_COMPONENTS','INVENTORY_RECORDS','LWRS','LWRS','LWRS','OBJECTS','OBJ_LOGINS','OBJ_PROPS','OBJ_PROPS','OBJ_PROPS','OBJ_STATE_DEFS','PROTOCOL_INFO','PROTOCOL_TEST_GROUPS','REPORT_TEMPLATE','SPEC_ALERTS','SPEC_ALERTS','TEST_FIELDS','TEST_RESOURCES','TEST_TYPES','ALTERNATE_RESULT_FAILURES','ALTERNATE_TEST_SPECS','BATCH_RECORDS','OBJ_DTAS','EXTENDED_PROPERTIES','FORM_UPDATE_INFO','GW_PKG_CODES','INVENTORY_RECORDS','LWRS','MESSAGES','NONPULLS','NON_PULL_INVENTORY','OBJECTS','OBJ_ACCESS_TYPES','OBJ_EVENTS','OBJ_EVENT_CODES','OBJ_EVENT_TYPES','OBJ_PROP_DEFS','OBJ_FORMS','OBJ_PROCESS_LOCKS','OBJ_PROCESSES','OBJ_REPORT_TEMPLATES','OBJ_SEARCH_ACCESS','OBJ_SEARCH_COLUMNS','OBJ_SEARCH_STATUSES','OBJ_STATE_AUTO_TRANSITIONS','OBJ_STATE_DEFS','OBJ_STATE_TRANSITIONS','OBJ_TRASH_ITEMS','OBJ_TYPES','OBJ_TYPE_PROPS','OBJ_TYPE_VIEWS','OBJ_USER_PROFILE_MESSAGES','OBJ_USER_PROFILE_OBJECTS','OBJ_USER_PROFILE_SEARCHES','OBJ_VIEWS','OBJ_VIEW_COLUMNS','OBJ_VIRTUAL_OBJECTS',
	'OPTION_DEFS','OPTION_VALUES','PROTOCOL_STORAGES','PROTOCOL_TEST_GROUPS','REPORT_TEMPLATE','RESULTS','RESULTS_TEST_FIELDS','OBJ_SESSION_TRACES','SLIM_TIME_ZONES','SPEC_ALERTS','TESTS','TEST_FIELDS','TEST_FIELD_FORMATS','TEST_FIELD_TERMS','TEST_OBS_TERMS2','TEST_RESOURCES','TEST_TYPES','TEST_TYPE_GROUPS','TMPPROCSEARCHCOL','TMPPROCSEARCHCOLUMNS','TMPPROCSEARCHOBJECTS','TMPPROCSEARCHPROPS','TMPPROCSEARCHROW','TMPPROCSEARCHSTATES','TMPPROCSEARCHVALUE','USERS','OBJ_CLSID_NAMES','TEST_OBS_TERMS','OBJ_ROOT_OBJECTS','OBJ_SPECIAL_OBJECTS','OBJ_LIST_DEFS','OBJ_LOGICAL_CHECKS','INVENTORY_XACT_TYPES','PROTOCOL_PULL_CHAMBERS','TMPBROWSESTUDIES','USERS');

	FOR indx in 1 .. t_IndexNameList.COUNT
	LOOP
		SELECT COUNT(INDEX_NAME) INTO v_Count FROM DBA_INDEXES WHERE INDEX_NAME = t_IndexNameList(indx) AND owner = v_SchemaName;
		IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: index: '||v_SchemaName||'.'||t_IndexNameList(indx)||' is missing!');
		ELSE
			DBMS_OUTPUT.PUT_LINE('Index: '||v_SchemaName||'.'||t_IndexNameList(indx)||' is present');
			SELECT index_type, status, table_name INTO v_IndexType, v_IndexStatus, v_IndexTabName FROM dba_indexes WHERE index_name  = t_IndexNameList(indx) AND owner = v_SchemaName;

			IF (v_IndexType = t_IndexTypeList(indx))	THEN	DBMS_OUTPUT.PUT_LINE('-- index type '||v_IndexType||' is correct');
			ELSE							DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: index type '||v_IndexType||' is incorrect; it should be '||t_IndexTypeList(indx)||'!');
			END IF;

			IF (v_IndexStatus = 'VALID')			THEN	DBMS_OUTPUT.PUT_LINE('-- index is '||v_IndexStatus);
			ELSE							DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: index status '||v_IndexStatus||' is incorrect; it should be VALID!');
			END IF;

			IF (v_IndexTabName = t_IndexTabNameList(indx))	THEN	DBMS_OUTPUT.PUT_LINE('-- on the correct table: '||v_IndexTabName);
			ELSE							DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: on the wrong table: '||v_IndexTabName||'; it should be '||t_IndexTabNameList(indx)||'!');
			END IF;
		END IF;
	END LOOP;
END;
/

PROMPT
SELECT owner, index_name, index_type, status, table_name FROM dba_indexes WHERE owner = 'SLIM' ORDER BY 3, 2;

PROMPT
PROMPT ________________________________________________________________________________
PROMPT Determining whether the NuGenesis Stability accounts own the correct number of procedures, functions, and packages
PROMPT
DECLARE
v_Count			PLS_INTEGER := 0;
v_ExpectedNo		PLS_INTEGER := 2;
v_ObjName		dba_procedures.object_name%TYPE;
v_ObjType		dba_procedures.object_type%TYPE;
v_ObjStatus		dba_objects.status%TYPE;
v_SchemaName		VARCHAR2(100);

TYPE ObjList		IS TABLE OF VARCHAR2(500);
t_SchemaList		ObjList;
t_FunctionList		ObjList;
t_ProcedureList		ObjList;
t_PackageList		ObjList;
t_PackageBodyPresent	ObjList;
BEGIN
	t_SchemaList := ObjList('SLIM','SLIM_ADMIN');
	FOR indx2 IN 1 .. t_SchemaList.COUNT
	LOOP
		v_SchemaName := t_SchemaList(indx2);
		IF	(v_SchemaName = 'SLIM_ADMIN')	THEN
			t_FunctionList  := ObjList();
			t_ProcedureList := ObjList();
			t_PackageList   := ObjList();
			t_PackageBodyPresent := ObjList();
		ELSIF	(v_SchemaName = 'SLIM')		THEN
			t_FunctionList  := ObjList('IP_SESSION_TRACE','IP_STATUS_STUDY_UNINIT','PROC_SS_GETVERSION','BROWSE_VIEWS','IP_CHECK_NAME','IP_REPORT_TABLE_DUMP','IP_STATUS_CHANGE','PROC_GET_INFO_MSGS','IP_STATUS_NPULL_COMP','IP_PARSE_INTERVAL','PROC_SET_ITEM_STATUS','IP_LIST_TEST_LAB','IP_GET_LWR','ISDATE','IP_REPORT_TABLE_DEPENDENCIES','IP_LIST_TEST_TYPE_REFS','PROC_GET_NONPULL_COLLECTION','IP_REPORT_PROC_SOURCE','IP_STATUS_LWR_UNREQUEST','LIKEFUNCTION','IP_STATUS_TEST_VERIFY','IP_LIST_DATE_REMOVED','PROC_SRG_RENAMETEMPLATE','IP_LIST_CONTAINER_UNITS','PROC_CHECK_OBJECT_EXISTS','IP_STATUS_LWR_UNPULL','PROC_CLEAR_MESSAGE_BUFFER','IP_LOG_SYSTEM_EVENT','NUMTOHEX','IP_COPY_OBJECT_TEST_FIELD','IP_STATUS_NPULL_OMIT','IP_LIST_GLOB_TEST_GROUPS','IP_LIST_INITIAL_DATE','IP_DELETE_INDIRECT','PROC_SRG_GETTEMPLATEPROPERTIES','IP_STATUS_LWR_REQUEST','IP_STATUS_STUDY_PENDING','IP_LIST_STATUS','IP_GET_OPTION_INT','PROC_USER_LOGOUT','PROC_SLIM_INIT','IP_LIST_FIND_PROPSORT','BROWSE_SPEC_ALERTS','PROC_NONPULL_SET_STATUS','BROWSE_TEST_RESOURCES','PROC_DTA_CREATE','IP_STATUS_STUDY_RESUME','IP_MSG_FMT','IP_STATUS_STUDY_SUSPEND','BROWSE_USER_PRODUCTS','IP_STATUS_STUDY_COMPLETE','IP_CHECK_LAB_ACCESS','PROC_PKI_GETANALYST','PROC_CHECK_PASSWORD','IP_LIST_BATCH','BROWSE_USER_LABS','IP_STATUS_TEST_UNVERIFY','PROC_PKI_GETTGSTATUS','PROC_GET_LWR_COLLECTION','HEXTONUM','PROC_UNLOCK_OBJECT','PROC_PKI_SETBATCH','IP_PP_SEARCH','IP_LIST_PACKAGING_TYPES','IP_LIST_RESULT','IP_LIST_CALENDAR_DISPLAY','IP_PP_COMMON','CHECKDATEFORMAT','IP_PG_SEARCH2','IP_SEND_EMAIL','PROC_PKI_GETASSOCLWR','PROC_PKI_SETOBJECTVISIBLE','PROC_DUPLICATE_FORMULATIONS','IP_CLOSE_OBJECT','IP_STATUS_LWR_UNAPPROVE','FN_PULL_CHAMBERS_FMT','IP_LIST_PROD_TEST_GROUPS','IP_COPY_OBJECT_PRODUCT','IP_LIST_INTERVALS','FN_NONPULL_CHAMBERS_FMT','RTNUMGT','IP_CHECK_CUSTOM','PROC_PUT_PROPERTIES','IP_PP_VIEWS_COMMON','IP_COPY_OBJECT_CUSTVIEWFLD','IP_STATUS_LWR_VERIFY','PROC_CHECK_TG_EDITED','PROC_FAILED_LOGIN','IP_PG_RESULT','IP_LWR_SET_STATUS','IP_PARSE_DATE_RANGE','IP_STATUS_STUDY_INIT','PROC_LWR_SET_STATUS',
'BROWSE_SYSTEM_CATALOG','FN_CALC_INTERVAL_FMT','IP_STATUS_NPULL_REQ','BROWSE_HIDDEN_ROOTS','IP_LIST_TEST_STATUS','PROC_SRG_GETTEMPLATE','IP_PP_USER_TEMPLATE','IP_LIST_TEST_FIELD_FORMATS','PROC_PKI_GETLWRSTATUS','PROC_SRG_SETTEMPLATEHIDDEN','PROC_PKI_LOCKOBJECT','REVERSE','UTIL_OBJ_DIST','IP_CHECK_USER_ROLE','PROC_PKI_SETREADONLYFLAG','IP_LIST_NOTEBOOK_REF','IP_LIST_NONPULL_LAB','PROC_LWR_CONFIRM_CLOSE','BROWSE_SYSTEM_PROCESSES','PROC_SRG_SETGLOBALTEMPLATE','IP_LIST_TEST_TYPES','IP_LIST_FIND_STATUS','PROC_GET_USERNAME','FN_CHECK_LOCATION','IP_LIST_FIND_PROP','IP_PP_USER_COMMON','IP_LIST_INVENTORY_XACT','BROWSE_USER_PROFILE_SEARCHES','IP_STATUS_TEST_NOT_ENTERED','IP_PG_FORM_COMP_TEMPLATE','IP_REPORT_DB_OBJ','IP_STATUS_STUDY_UNARCHIVED','IP_LIST_FORMULATION','IP_USER_ISADMIN','FN_CALC_INTERVAL_HOURS','IP_PARSE_NUMERIC_RESULT','IP_PG_BATCH_RECORD_TEMPLATE','ISNUMERIC','IP_PULL_LWR_NOTIFY','IP_STATUS_TEST_ENTER','PROC_DTA_DELETE','PROC_CHECK_CHANGECONTROL','PROC_EVENTLOG_ADD','IP_LIST_LWR_CHAMBERS','IP_PP_OBJECT_TEST_GROUP','IP_SECURITY_LABS','STUFF','PROC_GET_LWR_SAMPLE_ID','IP_REPORT_TABLE_COLUMNS','IP_LIST_GLOB_TEST_TYPES','BROWSE_PRIVILEDGES','IP_PP_CCC_TEMPLATE','PROC_LOCK_OBJECT','IP_DTA_EVAL_INT','IP_LIST_CLIENT','IP_DELETE_OBJECT','PROC_PKI_GETLWRCOUNT','PROC_PKI_GETCHANGECONTROLS','PROC_CANONICAL_PATH','IP_LIST_FIND_TYPES','FN_GET_MAX_PULL_CHAM','IP_REPORT_USER_GUIDE','IP_STUDY_IS_EDITABLE','IP_COPY_OBJECT_TEST_CAT','IP_LIST_USER','BROWSE_SEARCH_COLUMNS','BROWSE_PROTEMP_INT','TODATE','IP_TEST_GROUP_IS_EDITABLE','IP_STATUS_LWR_UNVERIFY','IP_LIST_DATE_COMPLETED','IP_LIST_TEST_TYPE_NAME','BROWSE_SYSTEM_CATALOG_TABLE','BROWSE_OBJECT_LOCKS','IP_STATUS_STUDY_ARCHIVED','IP_LIST_EVENT_CODES','PROC_PKI_GETUSERS','IP_COPY_OBJECT','IP_STATUS_NPULL_UNCOMP','IP_LIST_ALTSPEC','IP_STATUS_NPULL_UNOMIT','PROC_PKI_SETTCREF','IP_DELETE_OBJECT_CHECK','IP_PG_FORM_COMP','IP_NONPULL_SET_STATUS','IP_USER','PROC_PKI_GETTESTSTATUS','IP_SECURITY','FN_CALC_SCHEDULE_DATE','IP_MSG2','IP_LIST_TEST_SELECTIONS','PROC_PKI_SETALTSPEC','PROC_SET_SPEC_ALERT_STATUS',
'IP_COPY_OBJECT_TEST_GROUP','IP_DELETE_TEST_TYPE_REF','PROC_PKI_GETCUSTOMVIEWS','PROC_UPDATE_PASSWORD','IP_DTA_EVAL','PROC_PKI_SETLAB','IP_CHECK_OBJACESSBYLAB','PROC_CHECK_USER_ROLE','IP_LIST_METHOD_REF','FN_LINE_CALCULATION','IP_PG_PROTOCOL_NODE','FN_STG_LOCATION_FMT','PROC_CHANGE_PASSWORD','IP_LIST_ALL_USERS','TO_DATEDATE','PROC_PKI_GETSPECIALOBJECTS','PROC_SRG_SETUSERTEMPLATE','PROC_SS_GETUSERS','TO_NCHARDATE','PROC_PKI_SETLWRVERIFIED','IP_LIST_CALENDAR_LABS','IP_REPORT_EVENT_LOG','PROC_DELETE','PROC_PKI_UNLOCKOBJECT','IP_LIST_FIND_TYPES2','PROC_LOOKUP','IP_STATUS_STUDY_APPROVE','IP_QUERY_OBJECT_OPEN','FN_GET_SEARCH_NAME','PROC_GET_EXTENDED_PROPS','IP_PP_OBJECT_TEST_CAT','IP_REPORT_LAB_SECURITY','PROC_INIT','IP_LIST_SUB_INTERVALS','IP_LATE_LWR_NOTIFY','PROC_GET_REPORT_TYPES','IP_DELETE_CCC','IP_DELETE_STUDY_PKG','BROWSE_SYSTEM_TYPES','BROWSE_USERS','IP_PP_OBJECT_TEST_FIELD','IP_QUERY_NOT_LOCKED','PROC_LWR_CLOSE','IP_CREATE_NAME','PROC_SET_TIME_INTERVAL_STATUS','PROC_SET_LWR_COLLECTION','PROC_PKI_SETUSER','IP_EVALINT','IP_FINDVAL','IP_EV_LOG_STUDY_STATUS_CHANGE','IP_GET_OPTION','PROC_LWR_CHECK_SECURITY','IP_PARSE_RANGE','BROWSE_CC_CODES','IP_LIST_STUDY_COORD','IP_COPY_OBJECT_STUDY','IP_STATUS_NPULL_UNREQ','IP_PG_SEARCH','BROWSE_SYSTEM_FIELDS','IP_OPEN_OBJECT','PROC_PKI_GETSTATUS','IP_REPORT_RESOURCE_MAPPING','IP_LIST_LOTS','FN_LWR_SECURITY','PROC_SET_LWR_SAMPLE_ID','BROWSE_TYPE_STATUSES','PROC_DTA_SET_VALUE','PROC_FAVORITES_REMOVE','FN_OBJ_PRODUCT_ACCESS','BROWSE_STORAGE_PULL','IP_CHECK_STUDY_ACCESS','IP_CREATE_TEST','PROC_PKI_GETPENDINGLWRS','PROC_PKI_REVISESAMPLETEMP','IP_SET_RESULT','PROC_FORM_SET_VALUE','PROC_SET_TESTINFO','PROC_RETEST','PROC_LWR_GET_STATUS','PROC_PKI_GETSAMPLETEMP','IP_PG_CHANGE_CONTROL','PROC_DELETE_LWR_COLLECTION','IP_LIST_ORIENTATION','IP_PP_USER','IP_PG_TEST_RESOURCE','IP_REPORT_INVENTORY','BROWSE_TEST_CATEGORIES','IP_PG_COPY_GLOBAL_TG','IP_CREATE_NONPULL','PROC_COPY_TESTS','IP_PP_NONPULL','BROWSE_USER_PROFILE_FAVORITES','BROWSE_USER_PROFILE_LABS','BROWSE_INVENTORY','IP_REPORT_PSR','FN_CHECK_NPULL_RESCHED_DATE',
'PROC_ADJUST_NONPULL_SCHEDULE','PROC_PKI_COPYGLOBSAMPLETEMP','PROC_SEARCH__','PROC_SET_EXTENDED_PROPS','PROC_PKI_SETTESTFIELD','IP_PP_FORM_COMP','IP_REPORT_DISCARD','IP_REPORT_ANNOTATIONS','IP_LIST_SUB_TEST_CONDS','IP_SCHEDULE_06','FN_CHECK_LWR_RESCHED_DATE','PROC_GET_RESCHED_DATES','PROC_OBJECT_SEARCH_02','IP_DELETE_STORAGE','BROWSE_FORM_COMP','IP_REPORT_CUST_BANALYSIS','IP_REPORT_CUST_BSUMMARY','PROC_CUSTOM_REPORTS','PROC_PKI_SETCLIENT','IP_REPORT_SPEC_ALERT_CS','IP_SCHEDULE_00','IP_SCHEDULE_01','IP_SCHEDULE_02','IP_SCHEDULE_03','FN_GET_LWR_RESCHED_DATE','IP_SCHEDULE_04','IP_SCHEDULE_05','PROC_TEST_SCHEDULE','PROC_PKI_SETLWRPULLED','IP_PP_BATCH_RECORD_TEMPLATE','BROWSE_MATRIX_TEST_GROUPS','PROC_PKI_GETFORMULATIONS','IP_PP_PROTOCOL_TEMP','IP_REPORT_BATCH','BROWSE_TAG','BROWSE_RECYCLING_BIN','IP_REPORT_NONPULL_SAMPLE_INFO','PROC_RESULT_SPECFAILED','FN_CURRENT_TEST_PROPS','IP_PG_CCC','PROC_SET_RESULT','IP_LIST_FORM_USE','PROC_RESULTS','PROC_LWR_RESULTS','PROC_DIRECT_COPY','BROWSE_RELATED_ITEMS','PROC_PKI_SETCOUNTRY','IP_LIST_INGREDIENT_TYPE','PROC_PKI_SETPRODUCT','PROC_GET_STUDY_PROTOCOL','IP_PP_ADD_TEST_TYPE_REF','BROWSE_TESTS','PROC_RESTORE','IP_PG_NONPULL','IP_PG_OBJECT','IP_PG_STUDY_FIELD','IP_REPORT_STUDY_RESULTS','IP_REPORT_STUDY_HTML','IP_LIST_PKG_COMPS','IP_PG_TEST','BROWSE_LWRS','PROC_PKI_GETLWRS','IP_DELETE_SAVED_SEARCH','IP_REPORT_LWR_FORM','PROC_LWR_FORM','PROC_IMPORT_RESULTS','BROWSE_CHAMBERS','IP_REPORT_SAMPLE_INFO','PROC_STUDY_EXTERNAL_LABELS','IP_LIST_ST_TEST_GROUP','BROWSE_TEST_GROUPS','IP_AUTO_REQ_LWRS','IP_PG_CCC_TEMPLATE','IP_PG_BATCH_LOT','PROC_FLAG_TEST','PROC_SLIMSTAT_RESULTS','PROC_PKI_GETPRODFAMILY','IP_DELETE_TEST','IP_DELETE_NONPULL','PROC_DELETE_TESTING','IP_STATUS_LWR_APPROVE','IP_PG_PROTOCOL_TEMP','BROWSE_TIME_INTERVAL','IP_PG_COPY_GLOBAL_TT','PROC_PKI_GETPACKAGINGITEMS','PROC_FORMULATION_SEARCH','PROC_GET_LIST_ENTRIES','IP_PG_APPLY_TESTING','IP_LIST_FIND_PROP_VALUE2','PROC_PKI_SETLWRAPPROVED','PROC_CREATE_TEST','IP_PP_ADD_STUDY_PKG','BROWSE_TEST_FIELDS','PROC_PKI_GETLABS','PROC_PKI_SETTESTVERIFIED','BROWSE_BATCHES',
'IP_LIST_BATCH_USE','PROC_PKI_SETMANUFACTURINGSITE','IP_PP_OBJECT','IP_PP_TEST_FIELD','BROWSE_SEARCH','IP_REPORT_PROTOCOL','IP_PG_USER','IP_PG_INVENTORY_TEMPLATE','IP_PG_INVENTORY_RECORD','IP_PG_ADD_STUDY_PKG','IP_PG_ADD_TEST_TYPE_REF','IP_PG_SET_PULL_CHAMBER','IP_PG_COPY_PROD_TG','IP_PG_USER_TEMPLATE','PROC_GET_PROPERTIES','PROC_GET_PROPERTIES_REVISE','BROWSE_LAB','IP_REPORT_PRODUCT_HTML','IP_PP_INVENTORY_TEMPLATE','PROC_PKI_SETFORMULATION','IP_REPORT_STUDY_INVENTORY','PROC_PKI_SETPRODFAMILY','PROC_CHECK_RESULT','IP_LIST_CONDITION','PROC_PKI_GETCLIENTS','BROWSE_PROTOCOL_NODE','IP_LIST_PROD_FAMILY','IP_PP_TEST_TEMPLATE','IP_DELETE_BATCH_LOT','BROWSE_SAVED_SEARCH','BROWSE_LOCATION','PROC_ADD_EVENT','IP_LIST_AMOUNT_UNIT','PROC_IMPORT_TESTINFO','IP_REPORT_OBJECT','PROC_FAVORITES_ADD','PROC_PKI_GETSTUDYSTATUSCOUNTS','PROC_PKI_SETRESULTSQUAL','PROC_PKI_COPYGLOBTESTCAT','IP_DELETE_FORM_COMP','UTIL_DUMP_LOGIN_RECORDS','IP_LIST_STORAGE_CATEGORY','PROC_LWR_LABELS','IP_LIST_ALTERNATE_SPEC_COUNTRY','IP_PP_BATCH_LOT','PROC_PKI_SETLWRREADONLYFLAG','BROWSE_RESTRICTED_ROOT','BROWSE_OBJECT','BROWSE_ROOT','PROC_PKI_SETMETHSTATUS','BROWSE_TEST_GROUP','IP_LIST_LOCATION','BROWSE_STUDIES','PROC_PKI_GETGLOBTC','BROWSE_PRODUCTS','PROC_CHECK_LWR_VERIFY','BROWSE_STUDY_PACKAGING','PROC_PKI_GETFRMLCURUSETAGS','BROWSE_PROTEMP_COND','BROWSE_RESULTS_INFO','BROWSE_BATCH_LOTS','BROWSE_CHAMBER','BROWSE_CHAMBER_CONDITION','BROWSE_CONDITIONS','BROWSE_USER_PROFILE_VIEWS','BROWSE_FORMULATIONS','BROWSE_LABS','BROWSE_PRODUCT','BROWSE_NONPULLS','BROWSE_STORAGES','BROWSE_STUDY_FIELDS','BROWSE_STUDY_TEST_CATS','PROC_BROWSE','PROC_BROWSE2','IP_DELETE_USER','IP_PG_NONPULL_TEMPLATE','IP_LIST_NONPULL_EVENT','PROC_SHOW_DEFAULT_SCHEDULE','PROC_DTA_APPEND','PROC_ADJUST_LWR_SCHEDULE','PROC_PKI_GETSUPPLIERS','PROC_PKI_GETPRODUCTS','PROC_UPDATE_USER_LOGIN_COUNT','PROC_PKI_GETBATCHES','PROC_PKI_SETSUPPLIER','PROC_GET_PROPERTIES_COPY','IP_REPORT_FORMULA_HTML','PROC_DTA_EXECUTE','IP_REPORT_SPEC_ALERT','PROC_PKI_GETMANUFACTURINGSITES','IP_PP_STORAGE','IP_PP_APPLY_TESTING','PROC_GET_LWR_SAMPLE_INFO',
'IP_PP_TEST','PROC_PKI_SETSPECSTATUS','IP_PG_TEST_TEMPLATE','IP_LIST_METH_STATUS','IP_PP_OBJECT_TEMPLATE','IP_PG_TEST_FIELD','IP_LIST_FIND_PROP_VALUE','PROC_PKI_GETCOUNTRIES','PROC_LWR_EXTERNAL_LABELS','PROC_PKI_GETBATCHCURUSETAGS','PROC_PKI_FORMSETVALUE','PROC_PKI_GETRESULTSQUAL','IP_PE_DELETE_TEST','PROC_DELETE_TEST','PROC_PKI_GETGLOBSAMPLETEMP','PROC_PKI_SETTESTCAT','IP_LIST_ANALYSTS','IP_STATUS_LWR_PULL','PROC_NONPULL_GET_STATUS','IP_PP_FORM_COMP_TEMPLATE','PROC_BROWSE3','IP_DELETE_TIME_INTERVAL','IP_PP_TEST_RESOURCE','PROC_CHECK_USER_LOGIN_DISABLED','PROC_STUDY_LABELS','IP_REPORT_RESOURCE_NEEDS','IP_REPORT_TURNAROUND','IP_REPORT_DISCARD_WINDOW','PROC_REPORT','PROC_PKI_GETSTUDIES','PROC_PKI_SETSTUDY','PROC_PKI_CHECKLWRSEC','IP_PP_NONPULL_TEMPLATE','PROC_GET_REPORT_INTERFACE_INFO','PROC_PKI_SETSAMPLETEMPLATE','IP_LIST_STUDY_PURPOSE','IP_AUTO_PULL_EXT_LWRS','IP_AUTO_PULL_LWRS','PROC_RESULTS_QUERY','IP_PG_OBJECT_TEMPLATE','PROC_PKI_GETSPECSTATUS','IP_PG_STORAGE','PROC_PKI_GETMETHODSTATUS','IP_LIST_INGREDIENT','PROC_RESULTS_QUERY_02','IP_PP_SET_PULL_CHAMBER','PROC_GET_TESTS','IP_PG_STUDY_TEST_CAT','PROC_SRG_REPORT','PROC_PKI_GETTESTFIELDFORMAT','PROC_GET_TESTINFO','IP_LIST_TEST_CONDITIONS','IP_LIST_SPEC_STATUS','PROC_GET_INITIAL_LWRS');
			t_ProcedureList := ObjList('BROWSE_VIRTUAL_OBJECTS','IP_BUILD_CAPTION','IP_BUILD_FILTER','IP_CALC_ACTUAL_INTERVAL','IP_CLEAN_PROCESSES','IP_CREATE_STUDY_TEST_CAT','IP_FORMAT_RESULT','IP_FORM_LWR_COMMON','IP_GET_ASSOC_FORMULA','IP_GET_ASSOC_PRODUCT','IP_INVALID_ID','IP_LWR_GET_FORMATTED_STATUS','IP_LWR_GET_F_STATUS_LWR','IP_MSG','IP_PARSE_KEY_TYPE','IP_PARSE_NUMBER_ARRAY','IP_PARSE_NUMBER_LIST','IP_PP_CCC','IP_PRINT','IP_REPORT_HTML_FOOTER','IP_REPORT_HTML_HEADER','IP_REPORT_PROP','IP_REPORT_PROP2','IP_REPORT_USERS','IP_SCHEDULE_CAPTION','IP_SET_ENVIRONMENT_VALUE','IP_SET_SYSTEM_OPTION','PROC_COMMAND','PROC_CONFIG','PROC_FORM_QUERY_EDIT','PROC_QUERY_CUSTOM','PROC_REASSIGN_LABWORK','PROC_RESOURCE_SCHEDULE','PROC_SLIM_TERM','PROC_TERM','PROC_UNLOCK','PROC_WHO_AM_I','IP_CALC_ACTUAL_INTERVAL_NP','IP_NP_GET_FORMATTED_STATUS');
			t_PackageList   := ObjList('BITWISE','GLOBALPKG','IP_SECURITY_LABSPKG');
			t_PackageBodyPresent := ObjList('Y','Y','N');
		END IF;

		v_ExpectedNo   := t_FunctionList.COUNT;
		SELECT COUNT(*) INTO v_Count FROM dba_procedures WHERE owner = v_SchemaName AND object_type IN ('FUNCTION');
		IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE(v_SchemaName||' owns the expected number of functions ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: '||v_SchemaName||' owns less than the expected number of functions ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
		ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('WARNING: '||v_SchemaName||' owns more than the expected number of functions ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		END IF;

		FOR indx IN 1 .. t_FunctionList.COUNT
		LOOP
			v_ObjName := t_FunctionList(indx);
			SELECT COUNT(*) INTO v_Count FROM dba_procedures WHERE owner = v_SchemaName AND object_name = v_ObjName AND object_type = 'FUNCTION';
			IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: function '||v_SchemaName||'.'||v_ObjName||' is not present!');
			ELSIF (v_Count = 1)	THEN
				DBMS_OUTPUT.PUT_LINE('-- function '||v_SchemaName||'.'||v_ObjName||' is present');
				SELECT status INTO v_ObjStatus FROM dba_objects WHERE owner = v_SchemaName AND object_name = v_ObjName;
				IF (v_ObjStatus != 'VALID')	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: the function is not valid!');
				ELSE					DBMS_OUTPUT.PUT_LINE('-- the function is valid');
				END IF;
			END IF;
			DBMS_OUTPUT.PUT_LINE('.');
		END LOOP;

		v_ExpectedNo    := t_ProcedureList.COUNT;
		DBMS_OUTPUT.PUT_LINE('.');
		SELECT COUNT(*) INTO v_Count FROM dba_procedures WHERE owner = v_SchemaName AND object_type IN ('PROCEDURE');
		IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE(v_SchemaName||' owns the expected number of procedures ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: '||v_SchemaName||' owns less than the expected number of procedures ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
		ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('WARNING: '||v_SchemaName||' owns more than the expected number of procedures ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		END IF;

		FOR indx IN 1 .. t_ProcedureList.COUNT
		LOOP
			v_ObjName := t_ProcedureList(indx);
			SELECT COUNT(*) INTO v_Count FROM dba_procedures WHERE owner = v_SchemaName AND object_name = v_ObjName AND object_type = 'PROCEDURE';
			IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: procedure '||v_SchemaName||'.'||v_ObjName||' is not present!');
			ELSIF (v_Count = 1)	THEN
				DBMS_OUTPUT.PUT_LINE('-- procedure '||v_SchemaName||'.'||v_ObjName||' is present');
				SELECT status INTO v_ObjStatus FROM dba_objects WHERE owner = v_SchemaName AND object_name = v_ObjName;
				IF (v_ObjStatus != 'VALID')	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: the procedure is not valid!');
				ELSE					DBMS_OUTPUT.PUT_LINE('-- the procedure is valid');
				END IF;
			END IF;
			DBMS_OUTPUT.PUT_LINE('.');
		END LOOP;

		v_ExpectedNo  := t_PackageList.COUNT;
		DBMS_OUTPUT.PUT_LINE('.');
		SELECT COUNT(DISTINCT object_name) INTO v_Count FROM dba_procedures WHERE owner = v_SchemaName AND object_type IN ('PACKAGE');
		IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE(v_SchemaName||' owns the expected number of packages ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: '||v_SchemaName||' owns less than the expected number of packages ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('WARNING: '||v_SchemaName||' owns more than the expected number of packages ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		END IF;

		FOR indx IN 1 .. t_PackageList.COUNT
		LOOP
			v_ObjName := t_PackageList(indx);
			SELECT COUNT(DISTINCT object_name) INTO v_Count FROM dba_procedures WHERE owner = v_SchemaName AND object_name = v_ObjName AND object_type = 'PACKAGE';
			IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: package '||v_SchemaName||'.'||v_ObjName||' is not present!');
			ELSIF (v_Count = 1)	THEN
				DBMS_OUTPUT.PUT_LINE('-- package '||v_SchemaName||'.'||v_ObjName||' is present');
				SELECT status INTO v_ObjStatus FROM dba_objects WHERE owner = v_SchemaName AND object_name = v_ObjName AND object_type = 'PACKAGE';
				IF (v_ObjStatus != 'VALID')	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: the package is not valid!');
				ELSE					DBMS_OUTPUT.PUT_LINE('-- the package is valid');
				END IF;

				SELECT COUNT(*) INTO v_Count FROM dba_objects WHERE owner = v_SchemaName AND object_name = v_ObjName AND object_type = 'PACKAGE BODY';
				IF (t_PackageBodyPresent(indx) = 'N') THEN	DBMS_OUTPUT.PUT_LINE('-- no package body expected for package '||v_SchemaName||'.'||v_ObjName);
				ELSE
					SELECT status INTO v_ObjStatus FROM dba_objects WHERE owner = v_SchemaName AND object_name = v_ObjName AND object_type = 'PACKAGE BODY';
					IF (v_ObjStatus != 'VALID')	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: the package body is not valid!');
					ELSE					DBMS_OUTPUT.PUT_LINE('-- the package body is valid');
					END IF;
				END IF;
			END IF;
			DBMS_OUTPUT.PUT_LINE('.');
		END LOOP;
		DBMS_OUTPUT.PUT_LINE('.');
		DBMS_OUTPUT.PUT_LINE('.');
	END LOOP;
END;
/

PROMPT
PROMPT ________________________________________________________________________________
PROMPT Determining whether the NuGenesis Stability accounts own the expected triggers
PROMPT
DECLARE
v_Count			PLS_INTEGER := 0;
v_ExpectedNo		PLS_INTEGER;
v_SchemaName		VARCHAR2(100);

v_TriggerName		DBA_TRIGGERS.TRIGGER_NAME%TYPE;
v_TriggerStatus		dba_triggers.status%TYPE;
v_TableOwner		dba_triggers.table_owner%TYPE;
v_TriggerType		dba_triggers.trigger_type%TYPE;
v_TriggerEvent		dba_triggers.triggering_event%TYPE;
v_TableName		dba_triggers.table_name%TYPE;

v_ExpectedStatus	dba_triggers.status %TYPE := 'ENABLED';
v_ExpectedTableName	dba_triggers.table_name%TYPE;
v_ExpectedTrigType	dba_triggers.trigger_type%TYPE;
v_ExpectedTrigEvent	dba_triggers.triggering_event%TYPE;

TYPE ObjList		IS TABLE OF VARCHAR2(500);
TYPE NumList		IS TABLE OF NUMBER;
t_SchemaList		ObjList;
t_ExpectedNoList	NumList;
t_TriggerNameList	ObjList;
t_TriggerTypeList	ObjList;
t_TriggerEventList	ObjList;
t_TriggerTabNameList	ObjList;

BEGIN
	t_SchemaList     := ObjList('SLIM','SLIM_ADMIN');

	FOR indx IN 1 .. t_SchemaList.COUNT
	LOOP
		v_SchemaName := t_SchemaList(indx);
		IF	(v_SchemaName = 'SLIM')		THEN
			t_TriggerNameList    := ObjList('TRIG_TMPHTML_INSERT','TRIG_TEMP_RESPONSE_DTA_EXE','TR_S_TMPIPPGSEARCHPROPS','TRIG_SEQ_CUSTOM_LIST','TRIG_PROTOCOL_STORAGES_UPDATE','TRIG_ALTERNATE_SPECS_DELETE','TRIG_ALTERNATE_SPECS_INSERT','TRIG_ALTERNATE_SPECS_UPDATE','TRIG_PROTOCOL_PULL_CH_UPDATE','TRIG_USERS_UPDATE','TR_S_TMPPROCSEARCHROW','TRIG_OBJ_PROCESSES_DELETE','TR_S_3554_1_USERS','TRIG_USERS_DELETE','TR_S_3554_6_USERS','TRIG_OBJECTS_UPDATE','TR_S_3514_8_OBJECTS','TRIG_OBJECTS_DELETE','TR_S_3514_1_OBJECTS','TR_SLIM_TIME_ZONES','TRIG_FORM_COMP_DELETE','TRIG_FORM_COMP_UPDATE','TRIG_FORM_COMP_INSERT','TR_PROTOCOL_TEST_GROUPS','TRIG_TEST_TYPES_UPDATE','TRIG_OBJ_EVENTS_INSERT','TR_S_3566_1_OBJ_EVENTS','TRIG_BATCH_RECORDS_UPDATE','TRIG_BATCH_RECORDS_DELETE','TR_S_3550_1_BATCH_RECORDS','TRIG_BATCH_RECORDS_INSERT','TRIG_LWRS_DELETE','TRIG_LWRS_UPDATE','TR_S_3547_1_LWRS','TRIG_INSERT_TMPSTATRETSET','TR_S_3518_1_SPEC_ALERTS','TR_S_NONPULLS','TRIG_OBJ_DTAS_DELETE','TRIG_TEST_TYPE_GROUPS_UPDATE','TRIG_INSERT_TMPREPORTLWRFORM','TR_S_3537_1_INVENTORY_RECORDS','TRIG_TESTS_DELETE','TRIG_OPTION_VALUES_UPDATE','TRIG_TEST_FIELDS_UPDATE','TR_S_3562_1_TESTS','TRIG_TESTS_INSERT','TRIG_TESTS_UPDATE','TR_S_TMPPROCSEARCHCOLS','TRIG_OBJ_PROPS_UPDATE','TR_S_3543_1_OBJ_USER_PROFILE_');
			t_TriggerTypeList    := ObjList
			t_TriggerTabNameList := ObjList('TMPHTML','TEMP_RESPONSE_DTA_EXECUTE','TMPIPPGSEARCHPROPS','CUSTOM_LIST','PROTOCOL_STORAGES','ALTERNATE_TEST_SPECS','ALTERNATE_TEST_SPECS','ALTERNATE_TEST_SPECS','PROTOCOL_PULL_CHAMBERS','USERS','TMPPROCSEARCHROW','OBJ_PROCESSES','USERS','USERS','USERS','OBJECTS','OBJECTS','OBJECTS','OBJECTS','SLIM_TIME_ZONES','FORMULATION_COMPONENTS','FORMULATION_COMPONENTS','FORMULATION_COMPONENTS','PROTOCOL_TEST_GROUPS','TEST_TYPES','OBJ_EVENTS','OBJ_EVENTS','BATCH_RECORDS','BATCH_RECORDS','BATCH_RECORDS','BATCH_RECORDS','LWRS','LWRS','LWRS','TMPSTAT_RESULTRETSET','SPEC_ALERTS','NONPULLS','OBJ_DTAS','TEST_TYPE_GROUPS','TMPIP_RPR_LWR_FORM_OBJS','INVENTORY_RECORDS','TESTS','OPTION_VALUES','TEST_FIELDS','TESTS','TESTS','TESTS','TMPPROCSEARCHCOLUMNS','OBJ_PROPS','OBJ_USER_PROFILE_SEARCHES');
			t_TriggerEventList   := ObjList('INSERT','INSERT','INSERT','INSERT','UPDATE','DELETE','INSERT','UPDATE','INSERT OR DELETE','UPDATE','INSERT','INSERT','INSERT','DELETE','INSERT','UPDATE','INSERT OR UPDATE','DELETE','INSERT','INSERT','DELETE','UPDATE','INSERT','INSERT','UPDATE','INSERT','INSERT','UPDATE','DELETE','INSERT','INSERT','DELETE','UPDATE','INSERT','INSERT','INSERT','INSERT','DELETE','UPDATE','INSERT','INSERT','DELETE','UPDATE','UPDATE','INSERT','INSERT','UPDATE','INSERT','UPDATE','INSERT');
		ELSIF	(v_SchemaName = 'SLIM_ADMIN')	THEN
			t_TriggerNameList    := ObjList();
			t_TriggerTypeList    := ObjList();
			t_TriggerTabNameList := ObjList();
			t_TriggerEventList   := ObjList();
		END IF;
		v_ExpectedNo := t_TriggerNameList.COUNT;

		SELECT COUNT(OBJECT_NAME) INTO v_Count FROM DBA_OBJECTS WHERE OBJECT_TYPE = 'TRIGGER' AND OWNER = v_SchemaName;
		IF	(v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE (v_SchemaName||' owns the expected number of triggers ('||v_ExpectedNo||' expected, '||v_Count||' found).');
		ELSIF	(v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE ('!!!!! ERROR: '||v_SchemaName||' owns less than the expected number of triggers ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
		ELSIF	(v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE (v_SchemaName||' owns more than the expected number of triggers ('||v_ExpectedNo||' expected, '||v_Count||' found).');
		END IF;

		FOR indx2 IN 1 .. t_TriggerNameList.COUNT
		LOOP
			v_TriggerName       := t_TriggerNameList(indx2);
			v_ExpectedTableName := t_TriggerTabNameList(indx2);
			v_ExpectedTrigType  := t_TriggerTypeList(indx2);
			v_ExpectedTrigEvent := t_TriggerEventList(indx2);
			SELECT COUNT(*) INTO v_Count FROM dba_triggers WHERE owner = v_SchemaName AND trigger_name = v_TriggerName;
			IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: trigger: '||v_SchemaName||'.'||v_TriggerName||' is not present!');
			ELSIF (v_Count = 1)	THEN
				DBMS_OUTPUT.PUT_LINE('Trigger: '||v_SchemaName||'.'||v_TriggerName||' is present');
				SELECT status INTO v_TriggerStatus FROM dba_triggers WHERE owner = v_SchemaName AND trigger_name = v_TriggerName;
				IF (v_TriggerStatus != v_ExpectedStatus)	THEN	DBMS_OUTPUT.PUT_LINE('--!!!!! ERROR: the trigger is not '||v_ExpectedStatus||'!');
				ELSE							DBMS_OUTPUT.PUT_LINE('-- the trigger is '||v_ExpectedStatus);
				END IF;

				SELECT table_owner, table_name, trigger_type, triggering_event INTO v_TableOwner, v_TableName, v_TriggerType, v_TriggerEvent FROM dba_triggers WHERE owner = v_SchemaName AND trigger_name = v_TriggerName;
				IF(v_TableOwner != v_SchemaName OR v_TableName != v_ExpectedTableName)	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: trigger '||v_TriggerName||' is not correctly defined!  It must point to the table '||v_SchemaName||'.'||v_ExpectedTableName||'!');	END IF;
				IF(v_TriggerType != v_ExpectedTrigType)					THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: trigger '||v_TriggerName||' is not correctly defined!  Trigger type must be '||v_ExpectedTrigType||'!');			END IF;
				IF(v_TriggerEvent != v_ExpectedTrigEvent)				THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: trigger '||v_TriggerName||' is not correctly defined!  Trigger event must be '||v_ExpectedTrigEvent||'!');		END IF;
			END IF;
			DBMS_OUTPUT.PUT_LINE ('.');
		END LOOP;
		DBMS_OUTPUT.PUT_LINE ('.');
	END LOOP;
END;
/

PROMPT
PROMPT ________________________________________________________________________________
PROMPT Determining if the NuGenesis Stability schema accounts own the correct sequences
PROMPT
DECLARE
v_Count			PLS_INTEGER := 0;
v_ExpectedNo		PLS_INTEGER;
v_ObjName		dba_sequences.sequence_name%TYPE;
v_ObjStatus		dba_objects.status%TYPE;
v_SchemaName		VARCHAR2(100) := 'SLIM';

TYPE ObjList		IS TABLE OF VARCHAR2(500);
t_SequenceList		ObjList;

BEGIN
	t_SequenceList := ObjList('IPRPTLWRFRMOBSTRM_SEQ','MICROSOFTSEQDTPROPERTIES','SEQ_CUSTOM_LIST','SEQ_LWRREPORT','SEQ_TEMPRESPONSE_DTA_EXE','SEQ_TMPHTML','SEQ_TMPSTAT_RESULT','S_3514_1_OBJECTS','S_3514_8_OBJECTS','S_3518_1_SPEC_ALERTS','S_3537_1_INVENTORY_RECORDS','S_3543_1_OBJ_USER_PROFILE_','S_3547_1_LWRS','S_3550_1_BATCH_RECORDS','S_3554_1_USERS','S_3554_6_USERS','S_3562_1_TESTS','S_3566_1_OBJ_EVENTS','S_PROTOCOL_TEST_GROUPS','TEMP_COLSIP_REPORT_PROTOCOL_IC','TEMP_COLSPROC_RESULTS_ICOL','TEMP_COLSTEST_SPREADSHEET_ICOL','TEMP_ROWSIP_REPORT_PROTOCOL_IR','TEMP_ROWSPROC_RESULTS_IROW','TEMP_ROWSTEST_SPREADSHEET_IROW','ZONE_ID','S_NONPULLS','S_TMPIPPGSEARCHPROPS','S_TMPPROCSEARCHCOLS','S_TMPPROCSEARCHROW','REPORT_TEMPLATE_SEQUENCE');
	v_ExpectedNo   := t_SequenceList.COUNT;

	SELECT COUNT(*) INTO v_Count FROM dba_sequences WHERE sequence_owner = v_SchemaName;
	IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE(v_SchemaName||' owns the expected number of sequences ('||v_ExpectedNo||' expected, '||v_Count||' found)');
	ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: '||v_SchemaName||' owns less than the expected number of sequences ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
	ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('WARNING: '||v_SchemaName||' owns more than the expected number of sequences ('||v_ExpectedNo||' expected, '||v_Count||' found)');
	END IF;

	FOR indx IN 1 .. t_SequenceList.COUNT
	LOOP
		v_ObjName := t_SequenceList(indx);
		SELECT COUNT(*) INTO v_Count FROM dba_sequences WHERE sequence_owner = v_SchemaName AND sequence_name = v_ObjName;
		IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: '||v_SchemaName||' does not own the sequence: '||v_ObjName);
		ELSIF (v_Count = 1)	THEN
			DBMS_OUTPUT.PUT_LINE('-- '||v_SchemaName||' owns the sequence: '||v_ObjName);
			SELECT status INTO v_ObjStatus FROM dba_objects WHERE owner = v_SchemaName AND object_name = v_ObjName AND object_Type = 'SEQUENCE';
			IF (v_ObjStatus != 'VALID')	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: the sequence '||v_ObjName||' is not valid!');
			ELSE					DBMS_OUTPUT.PUT_LINE('-- the sequence '||v_ObjName||' is valid');
			END IF;
		END IF;
	END LOOP;
END;
/

PROMPT
PROMPT ________________________________________________________________________________
PROMPT Determining if the NuGenesis Stability schema accounts own the correct number of views
PROMPT
DECLARE
v_Count			PLS_INTEGER := 0;
v_ExpectedNo		PLS_INTEGER;
v_ViewName		dba_views.view_name%TYPE;
v_SchemaName		VARCHAR2(500);

TYPE ObjList		IS TABLE OF VARCHAR2(500);
v_Views			ObjList;
v_Schemas		ObjList;

BEGIN
	v_Schemas	:= ObjList('SLIM');
	FOR ind IN 1 .. v_Schemas.COUNT
	LOOP
		v_SchemaName := v_Schemas(ind); -- Select a schema from the list
		IF (v_SchemaName = 'SLIM')		THEN -- Load the table variables with lists appropriate for the schema
			v_Views      := ObjList('VIEW_ANALYSTS','VIEW_FIND_OBJ_PROPS','VIEW_FORMULATION_COMPONENTS','VIEW_INVENTORY_RECORDS','VIEW_LIST_ALT_SPEC','VIEW_LIST_AMOUNT_UNIT','VIEW_LIST_BATCH_USES','VIEW_LIST_FORMULATION_USES','VIEW_LIST_INGREDIENT_TYPE','VIEW_LIST_RESULTS_QUAL','VIEW_LIST_STUDY_PURPOSES','VIEW_LOGIN_RECORDS','VIEW_LWRS','VIEW_LWRS2','VIEW_LWR_CHAMBERS','VIEW_OBJECTS','VIEW_OBJECTS_04','VIEW_OBJECT_COUNTS','VIEW_OBJ_PROPS','VIEW_OBJ_VIEWS','VIEW_PRODUCTS','VIEW_PROTOCOL_INFO','VIEW_PROTOCOL_STORAGES','VIEW_RESULTS','VIEW_RESULTS_02','VIEW_SESSION_DTAS','VIEW_SPECIAL_OBJECTS','VIEW_TESTS','VIEW_TESTS_03','VIEW_TESTS_04','VIEW_TEST_FIELDS2','VIEW_TEST_FIELDS3','VIEW_TEST_FIELDS4','VIEW_TEST_FIELDS5','VIEW_TEST_TYPES','VIEW_TYPE_INFO','VIEW_TYPE_PROPS','VIEW_TYPE_VIEWS','VIEW_USERS','VIEW_LIST_PROD_FAMILY','VIEW_LIST_SPEC_STATUS','VIEW_LIST_METH_STATUS','VIEW_LIST_STORAGE_CATEGORY','VIEW_LIST_NONPULL_EVENT','VIEW_NONPULLS','VIEW_LIST_ORIENTATIONS','VIEW_STORAGE_CONDITIONS');
		END IF;

		v_ExpectedNo := v_Views.COUNT;

		SELECT COUNT(*) INTO v_Count FROM dba_views WHERE owner = v_SchemaName;
		IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE(v_SchemaName||' owns the expected number of views ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: '||v_SchemaName||' does NOT own the expected number of views ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE(v_SchemaName||' owns more than the expected number of views ('||v_ExpectedNo||' expected, '||v_Count||' found)');
		END IF;

		FOR indx IN 1 .. v_Views.COUNT
		LOOP
			v_ViewName := v_Views(indx);
			SELECT COUNT(*) INTO v_Count FROM dba_views WHERE owner = v_SchemaName AND view_name = v_ViewName;
			IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: view '||v_SchemaName||'.'||v_ViewName||' is not present!');
			ELSIF (v_Count = 1)	THEN	DBMS_OUTPUT.PUT_LINE('-- view '||v_SchemaName||'.'||v_ViewName||' is present');
			END IF;
		END LOOP;
		DBMS_OUTPUT.PUT_LINE ('.');
	END LOOP;
END;
/

PROMPT
PROMPT ________________________________________________________________________________
PROMPT Checking to see if the SIM module has been installed  . . .
PROMPT
DECLARE
v_Count		PLS_INTEGER;
v_ExpectedNo	PLS_INTEGER := 67;
BEGIN
	SELECT COUNT(OBJECT_NAME) INTO v_Count FROM DBA_OBJECTS WHERE OWNER = 'SLIM' AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME LIKE '%PROC_PKI%';
	IF (v_Count = 0)		THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: the sim module has not been installed!  This module is required for the full integration between NuGenesis LMS and Stability!');
	ELSIF (v_Count >= v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The SIM module has been installed (expected '||v_ExpectedNo||' functions, '||v_Count||' found).');
	ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: the SIM module has been installed but only '||v_Count||' out of expected '||v_ExpectedNo||' pl/sql functions are present!');
	END IF;
END;
/

PROMPT
PROMPT ________________________________________________________________________________
PROMPT Checking for updates to SLIM in NuGenesis 9.2 / CWR0060.sql
PROMPT
DECLARE
v_Count		PLS_INTEGER;
v_ExpectedNo	PLS_INTEGER := 1;
BEGIN
	SELECT COUNT(*) INTO v_Count FROM DBA_OBJECTS WHERE OWNER = 'SLIM' AND OBJECT_TYPE = 'FUNCTION' AND OBJECT_NAME = 'PROC_PKI_GETPRODUCTTCS';
	IF (v_Count = 0)		THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: function slim.PROC_PKI_GETPRODUCTTCS has not been installed!');
	ELSIF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The function slim.PROC_PKI_GETPRODUCTTCS has been installed (expected '||v_ExpectedNo||', '||v_Count||' found).');
	ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: moe than one function slim.PROC_PKI_GETPRODUCTTCS has been installed (expected '||v_ExpectedNo||', '||v_Count||' found).');
	END IF;
	
	SELECT COUNT(*) INTO v_Count FROM DBA_SYNONYMS WHERE OWNER = 'PUBLIC' AND SYNONYM_NAME = 'PROC_PKI_GETPRODUCTTCS';
	IF (v_Count = 0)		THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: synonym public.PROC_PKI_GETPRODUCTTCS is not present!');
	ELSIF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The synonym public.PROC_PKI_GETPRODUCTTCS has been installed (expected '||v_ExpectedNo||', '||v_Count||' found).');
	ELSIF (v_Count > v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: moe than one synonym public.PROC_PKI_GETPRODUCTTCS is present (expected '||v_ExpectedNo||', '||v_Count||' found).');
	END IF;

	SELECT COUNT(*) INTO v_Count FROM DBA_TAB_PRIVS WHERE grantee = 'SLIMUSER' AND privilege = 'EXECUTE' AND owner = 'SLIM' AND table_name = 'PROC_PKI_GETPRODUCTTCS';
	IF (v_Count = 0)		THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: slimuser has NOT been gratned Execute on slim.PROC_PKI_GETPRODUCTTCS!');
	ELSIF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('Slimuser has been granted Execute on slim.PROC_PKI_GETPRODUCTTCS.');
	END IF;
END;
/

PROMPT
PROMPT
PROMPT ________________________________________________________________________________
PROMPT Checking for the built-in SLIM user accounts
PROMPT If these accounts are missing then NuGenesis LMS may not be able to connect with SLIM
PROMPT
DECLARE
TYPE ObjList		IS TABLE OF VARCHAR2(500);
t_UserAccounts		ObjList;
v_Count			PLS_INTEGER := 0;

BEGIN
	t_UserAccounts := ObjList('SLIM','Security','Administrator','System');
	FOR indx IN 1 .. t_UserAccounts.COUNT
	LOOP
		SELECT COUNT(*) INTO v_Count FROM slim.users WHERE name = t_UserAccounts(indx);
		IF (v_Count = 1)	THEN	DBMS_OUTPUT.PUT_LINE('-- user '||t_UserAccounts(indx)|| ' is present');
		ELSIF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('-- !!! WARNING: '||t_UserAccounts(indx)|| ' is NOT present in slim.users!');
		END IF;
	END LOOP;
END;
/

PROMPT
PROMPT ***************************************************************************************************************************************
PROMPT Verifying the Oracle background jobs for NuGenesis Stability in this database instance...
PROMPT ***************************************************************************************************************************************
PROMPT

DECLARE
v_status	VARCHAR2(30);	
v_enable	VARCHAR2(5);
v_fail		NUMBER;
v_Count		PLS_INTEGER := 0;
v_JobOwner	dba_scheduler_jobs.owner%TYPE;
v_JobRunCount	dba_scheduler_jobs.run_count%TYPE;
v_mostRecentRunDate	TIMESTAMP(6);
TYPE ObjList	IS TABLE OF VARCHAR2(500);
t_JobNameList	ObjList;
t_JobOwnerList	ObjList;
v_ExpectedNo	PLS_INTEGER;

BEGIN
	t_JobNameList  := ObjList('SLIMAUTOPULLLWR','SLIMAUTOREQUESTLWR');
	t_JobOwnerList := ObjList('SLIM','SLIM');
	v_ExpectedNo   := t_JobNameList.COUNT;

	DBMS_OUTPUT.PUT_LINE('.');
	DBMS_OUTPUT.PUT_LINE('__________________________________________________________________________________________');
	DBMS_OUTPUT.PUT_LINE('Determining whether the expected Oracle background jobs for NuGenesis Stability are present and running');
	DBMS_OUTPUT.PUT_LINE('.');
	SELECT COUNT(*) INTO v_Count FROM dba_scheduler_jobs WHERE job_name IN ('SLIMAUTOPULLLWR','SLIMAUTOREQUESTLWR');
	IF (v_Count = v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('The expected number of NuGenesis Stability background jobs are present in Oracle ('||v_ExpectedNo||' expected, '||v_Count||' found)');
	ELSIF (v_Count < v_ExpectedNo)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: less than the expected number of NuGenesis Stability background jobs are present in Oracle ('||v_ExpectedNo||' expected, '||v_Count||' found)!');
	END IF;

	FOR indx IN 1 .. t_JobNameList.COUNT
	LOOP
		SELECT COUNT(*) INTO v_Count FROM dba_scheduler_jobs WHERE job_name = t_JobNameList(indx);
		IF (v_Count = 0)	THEN	DBMS_OUTPUT.PUT_LINE('!!!!! ERROR: job '||t_JobNameList(indx)||' is not present!');
		ELSE
			DBMS_OUTPUT.PUT_LINE('Job '||t_JobNameList(indx)||' is present');
			SELECT owner, enabled, run_count, failure_count INTO v_JobOwner, v_enable, v_JobRunCount, v_fail FROM dba_scheduler_jobs WHERE job_name = t_JobNameList(indx);
			IF (v_JobOwner = t_JobOwnerList(indx))	THEN	DBMS_OUTPUT.PUT_LINE('-- job owner: '||v_JobOwner||' (expected: '||t_JobOwnerList(indx)||').');
			ELSE						DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: job owner: '||v_JobOwner||' (expected: '||t_JobOwnerList(indx)||')!');
			END IF;

			IF (v_enable = 'TRUE')			THEN	DBMS_OUTPUT.PUT_LINE('-- Enabled: '||v_enable||' (expected: TRUE).');
			ELSE						DBMS_OUTPUT.PUT_LINE('-- !!!!! ERROR: Enabled: '||v_enable||' (expected: TRUE)!');
			END IF;

			DBMS_OUTPUT.PUT_LINE('-- Run count : '||v_JobRunCount);
			DBMS_OUTPUT.PUT_LINE('-- Fail count: '||v_fail);
			IF (v_JobRunCount > 0)	THEN
				SELECT  STATUS, log_date INTO v_status, v_MostRecentRunDate FROM dba_scheduler_job_run_details WHERE JOB_NAME = t_JobNameList(indx) AND LOG_ID = (SELECT MAX(LOG_ID) FROM dba_scheduler_job_run_details WHERE JOB_NAME = t_JobNameList(indx));
				DBMS_OUTPUT.PUT_LINE('-- Most recent run date     : '||v_MostRecentRunDate);
				DBMS_OUTPUT.PUT_LINE('-- Status of most recent run: '||v_status);
			END IF;
		END IF;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('.');
	DBMS_OUTPUT.PUT_LINE('__________________________________________________________________________________________');
END;
/

COLUMN COMMENTS FORMAT A65
COLUMN OWNER FORMAT A12
COLUMN PROGRAM_NAME FORMAT A25
COLUMN REPEAT_INTERVAL FORMAT A45
COLUMN  END_DATE FORMAT A15
COLUMN START_DATE FORMAT A35
COLUMN NEXT_RUN_DATE FORMAT A35

PROMPT
PROMPT SLIM JOB PROGRAMS IN THIS DATABASE INSTANCE:
SELECT OWNER, PROGRAM_NAME, COMMENTS FROM DBA_SCHEDULER_PROGRAMS WHERE OWNER = 'SLIM';

PROMPT
PROMPT SLIM JOB SCHEDULING INFORMATION THIS DATABASE INSTANCE:
SELECT OWNER, SCHEDULE_NAME, START_DATE, REPEAT_INTERVAL, END_DATE, COMMENTS FROM DBA_SCHEDULER_SCHEDULES WHERE OWNER = 'SLIM';

PROMPT
PROMPT SLIM JOB CURRENTLY SCHEDULED FOR THIS DATABASE INSTANCE:
SELECT OWNER, JOB_NAME, JOB_CLASS, ENABLED, NEXT_RUN_DATE FROM DBA_SCHEDULER_JOBS WHERE OWNER = 'SLIM';

DECLARE
v_Count		NUMBER;
v_objnm		SYS.DBA_OBJECTS.OBJECT_NAME%TYPE;
v_objtyp	SYS.DBA_OBJECTS.OBJECT_TYPE%TYPE;
v_objown	SYS.DBA_OBJECTS.OWNER%TYPE;

CURSOR C_INVALOBJ is SELECT OBJECT_NAME, OBJECT_TYPE, OWNER FROM DBA_OBJECTS WHERE STATUS != 'VALID' AND OBJECT_NAME NOT LIKE 'BIN%' ORDER BY 3, 1;

BEGIN
	DBMS_OUTPUT.PUT_LINE('.');
	DBMS_OUTPUT.PUT_LINE('________________________________________________________________________');
	DBMS_OUTPUT.PUT_LINE('Checking the database for invalid oracle objects . . .');
	DBMS_OUTPUT.PUT_LINE('.');

	SELECT COUNT(OBJECT_NAME) INTO v_Count FROM DBA_OBJECTS WHERE STATUS != 'VALID' AND OBJECT_NAME NOT LIKE 'BIN%';
	IF (v_Count = 0) THEN	DBMS_OUTPUT.PUT_LINE('ALL OBJECTS IN THIS DATABASE ARE VALID, NO ACTION IS NECESSARY');
	ELSIF (v_Count > 0) THEN
		DBMS_OUTPUT.PUT_LINE('!!! WARNING: this database contains invalid objects !!!!!!!!!!!  Do not proceed with migration with invalid database objects!  The invalid objects are listed below:');
		OPEN C_INVALOBJ;
		LOOP
			FETCH C_INVALOBJ INTO v_objnm, v_objtyp, v_objown;
			EXIT WHEN C_INVALOBJ%NOTFOUND;

			DBMS_OUTPUT.PUT_LINE('-- OBJECT: '||v_objnm||'	TYPE: '||v_objtyp||'	OWNER: '||v_objown);
		END LOOP;
		CLOSE C_INVALOBJ;
	END IF;
	DBMS_OUTPUT.PUT_LINE('.');
	DBMS_OUTPUT.PUT_LINE('________________________________________________________________________');
	DBMS_OUTPUT.PUT_LINE('.');
END;
/



PROMPT
PROMPT ________________________________________________________________________________
PROMPT List of studies with most logged audit events (note: numbers > 10000 indicate possible interface errors)
PROMPT
COL name format a80
SELECT t1.obj_id as "Study ID",t1.obct as "Event Count",study.name "Study Name" FROM (SELECT OBJ_ID,COUNT(OBJ_ID) obct FROM slim.OBJ_EVENTS GROUP BY OBJ_ID ORDER BY 2 desc) t1, slim.OBJECTS study WHERE ROWNUM<=10 AND study.type_id=105 AND t1.obj_id=study.obj_id;

PROMPT
PROMPT ________________________________________________________________________________
PROMPT Most frequent event types for any study with more than 10000 events
PROMPT

BEGIN
dbms_output.put_line('---------------------------------------');
    FOR v_rec in (SELECT tst.name,tev.evcount,tst.obj_id from SLIM.OBJECTS tst, (SELECT obj_id,count(obj_id) evcount FROM SLIM.OBJ_EVENTS GROUP BY obj_id ORDER BY count(obj_id) desc) tev WHERE tst.obj_id=tev.obj_id AND EVCOUNT>10000 AND tst.TYPE_ID=105) LOOP
        dbms_output.put_line('Results for study: '||v_rec.name||'  OBJ_ID: '||v_rec.obj_id||'  Record count: '||v_rec.evcount);
        dbms_output.put_line('');
        dbms_output.put_line('Event Type,Count');
        FOR v_rec2 in (SELECT t2name,count(*) obct FROM (SELECT t2.name t2name,t1.* from SLIM.OBJ_EVENTS t1, SLIM.OBJ_EVENT_TYPES t2 WHERE OBJ_ID=v_rec.obj_id AND t1.event_type=t2.event_type) GROUP BY t2name ORDER BY count(*) desc) LOOP
        dbms_output.put_line(v_rec2.t2name||','||v_rec2.obct);
        END LOOP;
        dbms_output.put_line('---------------------------------------');
    END LOOP;
END;
/

PROMPT
PROMPT ________________________________________________________________________________


PROMPT
PROMPT ________________________________________________________________________________
PROMPT Checking for invalid entries in the slim.protocol_info table
PROMPT

DECLARE
v_IntervalObjectID	slim.protocol_info.interval_obj_id%TYPE;
v_ObjectID		slim.protocol_info.obj_id%TYPE;
v_StudyName		slim.objects.name%TYPE;
v_Interval		slim.protocol_info.interval%TYPE;
v_Count			PLS_INTEGER := 0;

CURSOR C_DistinctIntvlObjectIDs	IS SELECT DISTINCT(interval_obj_id) FROM slim.protocol_info WHERE interval_obj_id IS NOT NULL; -- Null values are permitted in this column per the table def, but are a different type of problem and are checked for in the next block.
CURSOR C_IntervalDetails	IS SELECT obj_id, interval FROM slim.protocol_info WHERE interval_obj_id = v_IntervalObjectID;
BEGIN
	DBMS_OUTPUT.PUT_LINE('Checking for duplicate interval object IDs in protocol_info...');
	OPEN C_DistinctIntvlObjectIDs;
	LOOP
		FETCH C_DistinctIntvlObjectIDs INTO v_IntervalObjectID;
		EXIT WHEN C_DistinctIntvlObjectIDs%NOTFOUND;

		SELECT COUNT(*) INTO v_Count FROM slim.protocol_info WHERE interval_obj_id = v_IntervalObjectID;
		IF (v_Count > 1)	THEN
			DBMS_OUTPUT.PUT_LINE('-- !!! WARNING: interval_obj_id '||v_IntervalObjectID||' is listed in protocol_info '||v_Count||' times');
			OPEN C_IntervalDetails;
			LOOP
				FETCH C_IntervalDetails INTO v_ObjectID, v_Interval;
				EXIT WHEN C_IntervalDetails%NOTFOUND;

				SELECT name INTO v_StudyName FROM slim.objects WHERE obj_id = v_ObjectID;
				DBMS_OUTPUT.PUT_LINE('-- -- Study: '||v_StudyName||'; interval: '||v_Interval);
			END LOOP;
			CLOSE C_IntervalDetails;
		END IF;
	END LOOP;
	CLOSE C_DistinctIntvlObjectIDs;
END;
/

PROMPT .
PROMPT Checking for NULL interval_obj_ids in protool_info:
col interval format 9999
SELECT objs.name "StudyName", protinfo.interval "Interval" FROM slim.objects objs, slim.protocol_info protinfo WHERE protinfo.interval_obj_id IS NULL AND protinfo.obj_id = objs.obj_id;
DECLARE
v_andate			DATE;

BEGIN
	DBMS_OUTPUT.PUT_LINE ('.');
	DBMS_OUTPUT.PUT_LINE ('.');
	DBMS_OUTPUT.PUT_LINE ('_________________________________________________________________________________');
	DBMS_OUTPUT.PUT_LINE ('Determining when the slim database schema was last analyzed');
	DBMS_OUTPUT.PUT_LINE ('Statistics generated by analysis are used by oracle to improve query performance');
	DBMS_OUTPUT.PUT_LINE ('.');

	select max(LAST_ANALYZED) INTO v_andate from ALL_TAB_COL_STATISTICS where owner = 'SLIM';
	IF v_andate IS NULL	THEN	DBMS_OUTPUT.PUT_LINE ('The slim schema has never been subjected to analysis');
	ELSE				DBMS_OUTPUT.PUT_LINE ('The slim schema was last analyzed on: '||v_andate);
	END IF;

	DBMS_OUTPUT.PUT_LINE ('.');
	DBMS_OUTPUT.PUT_LINE ('_________________________________________________________________________________');
	DBMS_OUTPUT.PUT_LINE ('.');
END;
/
PROMPT BUFFER POOL HIT RATIO:
SELECT 1 - (phy.value/(cur.value + con.value)) "HIT RATIO" from v$sysstat cur, v$sysstat con, v$sysstat phy WHERE cur.name = 'db block gets' AND con.name = 'consistent gets' AND phy.name = 'physical reads';

PROMPT
PROMPT SLIM VERIFICATION SCRIPT COMPLETE
PROMPT

SPOOL OFF
